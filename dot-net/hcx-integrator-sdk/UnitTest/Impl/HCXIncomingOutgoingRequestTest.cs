using Io.HcxProtocol.Dto;
using Io.HcxProtocol.Exceptions;
using Io.HcxProtocol.Impl;
using Io.HcxProtocol.Init;
using Io.HcxProtocol.Utils;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;
using System.IO;

namespace UnitTest.Impl
{
    [TestClass]
    public class HCXIncomingOutgoingRequestTest
    {
        private void InitializeConfig()
        {
            Config configObj = new Config();

            configObj.ProtocolBasePath = "http://dev-hcx.swasth.app/api/v0.7";
            configObj.ParticipantCode = "testprovider1.apollo@swasth-hcx-dev";
            configObj.AuthBasePath = "http://aef8101c432d04a659e6317b3e5031cf-1674586068.ap-south-1.elb.amazonaws.com:8080/auth/realms/swasth-health-claim-exchange/protocol/openid-connect/token";
            configObj.UserName = "testprovider1@apollo.com";
            configObj.Password = "Opensaber@123";
            configObj.EncryptionPrivateKey = "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCG+XLPYiCxrZq71IX+w7uoDGxGI7qy7XaDbL3BJE33ju7rjdrP7wsAOWRvM8BIyWuRZZhl9xG+u7l/7OsZAzGoqI7p+32x+r9IJVzboLDajk6tp/NPg1csc7f2M5Bu6rkLEvrKLz3dgy3Q928rMsD3rSmzBLelfKTo+aDXvCOiw1dMWsZZdkEpCTJxH39Nb2K4S59kO/R2GtSU/QMLq65m34XcMZpDtatA1u1S8JdZNNeMCO+NuFKBzIfvXUCQ8jkf7h612+UP1AYhoyCMFpzUZ9b7liQF9TYpX1Myr/tT75WKuRlkFlcALUrtVskL8KA0w6sA0nX5fORVsuVehVeDAgMBAAECggEAX1n1y5/M7PhxqWO3zYTFGzC7hMlU6XZsFOhLHRjio5KsImgyPlbm9J+W3iA3JLR2c17MTKxAMvg3UbIzW5YwDLAXViC+aW90like8mEQzzVdS7ysXG2ytcqCGUHQNStI0hP0a8T39XbodQl31ZKjU9VW8grRGe12Kse+4ukcW6yRVES+CkyO5BQB+vs3voZavodRGsk/YSt00PtIrFPJgkDuyzzcybKJD9zeJk5W3OGVK1z0on+NXKekRti5FBx/uEkT3+knkz7ZlTDNcyexyeiv7zSL/L6tcszV0Fe0g9vJktqnenEyh4BgbqABPzQR++DaCgW5zsFiQuD0hMadoQKBgQC+rekgpBHsPnbjQ2Ptog9cFzGY6LRGXxVcY7hKBtAZOKAKus5RmMi7Uv7aYJgtX2jt6QJMuE90JLEgdO2vxYG5V7H6Tx+HqH7ftCGZq70A9jFBaba04QAp0r4TnD6v/LM+PGVT8FKtggp+o7gZqXYlSVFm6YzI37G08w43t2j2aQKBgQC1Nluxop8w6pmHxabaFXYomNckziBNMML5GjXW6b0xrzlnZo0p0lTuDtUy2xjaRWRYxb/1lu//LIrWqSGtzu+1mdmV2RbOd26PArKw0pYpXhKFu/W7r6n64/iCisoMJGWSRJVK9X3D4AjPaWOtE+jUTBLOk0lqPJP8K6yiCA6ZCwKBgDLtgDaXm7HdfSN1/Fqbzj5qc3TDsmKZQrtKZw5eg3Y5CYXUHwbsJ7DgmfD5m6uCsCPa+CJFl/MNWcGxeUpZFizKn16bg3BYMIrPMao5lGGNX9p4wbPN5J1HDD1wnc2jULxupSGmLm7pLKRmVeWEvWl4C6XQ+ykrlesef82hzwcBAoGBAKGY3v4y4jlSDCXaqadzWhJr8ffdZUrQwB46NGb5vADxnIRMHHh+G8TLL26RmcET/p93gW518oGg7BLvcpw3nOZaU4HgvQjT0qDvrAApW0V6oZPnAQUlarTU1Uk8kV9wma9tP6E/+K5TPCgSeJPg3FFtoZvcFq0JZoKLRACepL3vAoGAMAUHmNHvDI+v0eyQjQxlmeAscuW0KVAQQR3OdwEwTwdFhp9Il7/mslN1DLBddhj6WtVKLXu85RIGY8I2NhMXLFMgl+q+mvKMFmcTLSJb5bJHyMz/foenGA/3Yl50h9dJRFItApGuEJo/30cG+VmYo2rjtEifktX4mDfbgLsNwsI=\n-----END PRIVATE KEY-----";
            configObj.IgUrl = "test";

            HCXIntegrator.initConfig(configObj);
        }

        //string commonFhirPayload = "{ \"resourceType\": \"Bundle\", \"id\": \"d4484cdd-1aae-4d21-a92e-8ef749d6d366\", \"meta\": { \"lastUpdated\": \"2022-02-08T21:49:55.458+05:30\" }, \"identifier\": { \"system\": \"https://www.tmh.in/bundle\", \"value\": \"d4484cdd-1aae-4d21-a92e-8ef749d6d366\" }, \"type\": \"document\", \"timestamp\": \"2022-02-08T21:49:55.458+05:30\", \"entry\": [{ \"fullUrl\": \"Composition/42ff4a07-3e36-402f-a99e-29f16c0c9eee\", \"resource\": { \"resourceType\": \"Composition\", \"id\": \"42ff4a07-3e36-402f-a99e-29f16c0c9eee\", \"identifier\": { \"system\": \"https://www.tmh.in/hcx-documents\", \"value\": \"42ff4a07-3e36-402f-a99e-29f16c0c9eee\" }, \"status\": \"final\", \"type\": { \"coding\": [{ \"system\": \"https://www.hcx.org/document-type\", \"code\": \"HcxCoverageEligibilityRequest\", \"display\": \"Coverage Eligibility Request Doc\" }] }, \"subject\": { \"reference\": \"Patient/RVH1003\" }, \"date\": \"2022-02-08T21:49:55+05:30\", \"author\": [{ \"reference\": \"Organization/Tmh01\" }], \"title\": \"Coverage Eligibility Request\", \"section\": [{ \"title\": \"# Eligibility Request\", \"code\": { \"coding\": [{ \"system\": \"https://fhir.loinc.org/CodeSystem/$lookup?system=http://loinc.org&code=10154-3\", \"code\": \"CoverageEligibilityRequest\", \"display\": \"Coverage Eligibility Request\" }] }, \"entry\": [{ \"reference\": \"CoverageEligibilityRequest/dc82673b-8c71-48c2-8a17-16dcb3b035f6\" }] }] } }, { \"fullUrl\": \"Organization/Tmh01\", \"resource\": { \"resourceType\": \"Organization\", \"id\": \"Tmh01\", \"identifier\": [{ \"system\": \"http://abdm.gov.in/facilities\", \"value\": \"HFR-ID-FOR-TMH\" }, { \"system\": \"http://irdai.gov.in/facilities\", \"value\": \"IRDA-ID-FOR-TMH\" } ], \"name\": \"Tata Memorial Hospital\", \"alias\": [ \"TMH\", \"TMC\" ], \"telecom\": [{ \"system\": \"phone\", \"value\": \"(+91) 022-2417-7000\" }], \"address\": [{ \"line\": [ \"Dr Ernest Borges Rd, Parel East, Parel, Mumbai, Maharashtra 400012\" ], \"city\": \"Mumbai\", \"state\": \"Maharashtra\", \"postalCode\": \"400012\", \"country\": \"INDIA\" }], \"endpoint\": [{ \"reference\": \"https://www.tmc.gov.in/\", \"display\": \"Website\" }] } }, { \"fullUrl\": \"Patient/RVH1003\", \"resource\": { \"resourceType\": \"Patient\", \"id\": \"RVH1003\", \"identifier\": [{ \"type\": { \"coding\": [{ \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\", \"code\": \"SN\", \"display\": \"Subscriber Number\" }] }, \"system\": \"http://gicofIndia.com/beneficiaries\", \"value\": \"BEN-101\" }, { \"system\": \"http://abdm.gov.in/patients\", \"value\": \"hinapatel@abdm\" } ], \"name\": [{ \"text\": \"Hina Patel\" }], \"gender\": \"female\" } }, { \"fullUrl\": \"CoverageEligibilityRequest/dc82673b-8c71-48c2-8a17-16dcb3b035f6\", \"resource\": { \"resourceType\": \"CoverageEligibilityRequest\", \"id\": \"dc82673b-8c71-48c2-8a17-16dcb3b035f6\", \"identifier\": [{ \"system\": \"https://www.tmh.in/coverage-eligibility-request\", \"value\": \"dc82673b-8c71-48c2-8a17-16dcb3b035f6\" }], \"status\": \"active\", \"purpose\": [ \"discovery\" ], \"patient\": { \"reference\": \"Patient/RVH1003\" }, \"servicedPeriod\": { \"start\": \"2022-02-07T21:49:56+05:30\", \"end\": \"2022-02-09T21:49:56+05:30\" }, \"created\": \"2022-02-08T21:49:56+05:30\", \"provider\": { \"reference\": \"Organization/Tmh01\" }, \"insurer\": { \"reference\": \"Organization/GICOFINDIA\" }, \"insurance\": [{ \"focal\": true, \"coverage\": { \"reference\": \"Coverage/dadde132-ad64-4d18-8c18-1d52d7e86abc\" } }] } }, { \"fullUrl\": \"Organization/GICOFINDIA\", \"resource\": { \"resourceType\": \"Organization\", \"id\": \"GICOFINDIA\", \"identifier\": [{ \"system\": \"http://irdai.gov.in/insurers\", \"value\": \"112\" }], \"name\": \"General Insurance Corporation of India\" } }, { \"fullUrl\": \"Coverage/dadde132-ad64-4d18-8c18-1d52d7e86abc\", \"resource\": { \"resourceType\": \"Coverage\", \"id\": \"dadde132-ad64-4d18-8c18-1d52d7e86abc\", \"identifier\": [{ \"system\": \"https://www.gicofIndia.in/policies\", \"value\": \"policy-RVH1003\" }], \"status\": \"active\", \"subscriber\": { \"reference\": \"Patient/RVH1003\" }, \"subscriberId\": \"SN-RVH1003\", \"beneficiary\": { \"reference\": \"Patient/RVH1003\" }, \"relationship\": { \"coding\": [{ \"system\": \"http://terminology.hl7.org/CodeSystem/subscriber-relationship\", \"code\": \"self\" }] }, \"payor\": [{ \"reference\": \"Organization/GICOFINDIA\" }] } } ] }";
        string commonFhirPayload = "{  \"resourceType\": \"Bundle\",  \"id\": \"605ccc58-00d7-4883-9393-c6530496191f\",  \"meta\": {    \"lastUpdated\": \"2023-02-17T12:32:19.672+05:30\",    \"profile\": [ \"https://ig.hcxprotocol.io/v0.7.1/StructureDefinition-CoverageEligibilityRequestBundle.html\" ]  },  \"identifier\": {    \"system\": \"https://www.tmh.in/bundle\",    \"value\": \"a5b54c44-f0ce-4604-98ad-f17455966023\"  },  \"type\": \"collection\",  \"timestamp\": \"2023-02-17T12:32:19.672+05:30\",  \"entry\": [ {    \"fullUrl\": \"CoverageEligibilityRequest/dc82673b-8c71-48c2-8a17-16dcb3b035f6\",    \"resource\": {      \"resourceType\": \"CoverageEligibilityRequest\",      \"id\": \"dc82673b-8c71-48c2-8a17-16dcb3b035f6\",      \"meta\": {        \"profile\": [ \"https://ig.hcxprotocol.io/v0.7.1/StructureDefinition-CoverageEligibilityRequest.html\" ]      },      \"identifier\": [ {        \"value\": \"req_70e02576-f5f5-424f-b115-b5f1029704d4\"      } ],      \"status\": \"active\",      \"priority\": {        \"coding\": [ {          \"system\": \"http://terminology.hl7.org/CodeSystem/processpriority\",          \"code\": \"normal\"        } ]      },      \"purpose\": [ \"benefits\" ],      \"patient\": {        \"reference\": \"Patient/RVH1003\"      },      \"servicedDate\": \"0026-12-13\",      \"created\": \"2023-02-17T12:32:18+05:30\",      \"enterer\": {        \"reference\": \"Practitioner/PractitionerViswasKar\"      },      \"provider\": {        \"reference\": \"Organization/GICOFINDIA\"      },      \"insurer\": {        \"reference\": \"Organization/WeMeanWell01\"      },      \"facility\": {        \"reference\": \"http://sgh.com.sa/Location/4461281\"      },      \"insurance\": [ {        \"coverage\": {          \"reference\": \"Coverage/COVERAGE1\"        }      } ],      \"item\": [ {        \"productOrService\": {          \"coding\": [ {            \"system\": \"https://irdai.gov.in/package-code\",            \"code\": \"E101021\",            \"display\": \"Twin Sharing Ac\"          } ],          \"text\": \" twin sharing basis room package\"        },        \"diagnosis\": [ {          \"diagnosisCodeableConcept\": {            \"coding\": [ {              \"system\": \"https://irdai.gov.in/package-code\",              \"code\": \"E906184\",              \"display\": \"SINGLE INCISION LAPAROSCOPIC APPENDECTOMY\"            } ],            \"text\": \"SINGLE INCISION LAPAROSCOPIC APPENDECTOMY\"          }        } ]      } ]    }  }, {    \"fullUrl\": \"Organization/WeMeanWell01\",    \"resource\": {      \"resourceType\": \"Organization\",      \"id\": \"WeMeanWell01\",      \"meta\": {        \"profile\": [ \"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Organization\" ]      },      \"identifier\": [ {        \"type\": {          \"coding\": [ {            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",            \"code\": \"AC\",            \"display\": \"Narayana\"          } ]        },        \"system\": \"http://abdm.gov.in/facilities\",        \"value\": \"HFR-ID-FOR-TMH\"      } ],      \"name\": \"WeMeanWell Hospital\",      \"address\": [ {        \"text\": \" Bannerghatta Road, Bengaluru \",        \"city\": \"Bengaluru\",        \"country\": \"India\"      } ]    }  }, {    \"fullUrl\": \"Organization/GICOFINDIA\",    \"resource\": {      \"resourceType\": \"Organization\",      \"id\": \"GICOFINDIA\",      \"meta\": {        \"profile\": [ \"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Organization\" ]      },      \"identifier\": [ {        \"type\": {          \"coding\": [ {            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",            \"code\": \"AC\",            \"display\": \"GOVOFINDIA\"          } ]        },        \"system\": \"http://irdai.gov.in/insurers\",        \"value\": \"GICOFINDIA\"      } ],      \"name\": \"GICOFINDIA\"    }  }, {    \"fullUrl\": \"Patient/RVH1003\",    \"resource\": {      \"resourceType\": \"Patient\",      \"id\": \"RVH1003\",      \"meta\": {        \"profile\": [ \"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Patient\" ]      },      \"identifier\": [ {        \"type\": {          \"coding\": [ {            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",            \"code\": \"SN\",            \"display\": \"Subscriber Number\"          } ]        },        \"system\": \"http://gicofIndia.com/beneficiaries\",        \"value\": \"BEN-101\"      } ],      \"name\": [ {        \"text\": \"Prasidh Dixit\"      } ],      \"gender\": \"male\",      \"birthDate\": \"1960-09-26\",      \"address\": [ {        \"text\": \"#39 Kalena Agrahara, Kamanahalli, Bengaluru - 560056\",        \"city\": \"Bengaluru\",        \"state\": \"Karnataka\",        \"postalCode\": \"560056\",        \"country\": \"India\"      } ]    }  }, {    \"fullUrl\": \"Coverage/COVERAGE1\",    \"resource\": {      \"resourceType\": \"Coverage\",      \"id\": \"COVERAGE1\",      \"meta\": {        \"profile\": [ \"https://ig.hcxprotocol.io/v0.7.1/StructureDefinition-Coverage.html\" ]      },      \"identifier\": [ {        \"system\": \"https://www.gicofIndia.in/policies\",        \"value\": \"policy-RVH1003\"      } ],      \"status\": \"active\",      \"subscriber\": {        \"reference\": \"Patient/RVH1003\"      },      \"subscriberId\": \"2XX8971\",      \"beneficiary\": {        \"reference\": \"Patient/RVH1003\"      },      \"relationship\": {        \"coding\": [ {          \"system\": \"http://terminology.hl7.org/CodeSystem/subscriber-relationship\",          \"code\": \"self\"        } ]      },      \"payor\": [ {        \"reference\": \"Organization/GICOFINDIA\"      } ]    }  } ]}";

        [TestMethod] //(1)
        public void HcxOutgoingRequestCheckSucess()
        {
            InitializeConfig();
            HCXOutgoingRequest hcxOutgoingRequest = new HCXOutgoingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            hcxOutgoingRequest.Generate(commonFhirPayload, Operations.COVERAGE_ELIGIBILITY_CHECK, "testprovider1.apollo@swasth-hcx-dev", output);
            BaseRequest baseRequest = new BaseRequest(output);
            Assert.AreEqual(HCXIntegrator.config.ParticipantCode, baseRequest.GetHcxSenderCode());

            //Note Output :   [Same in JAVA SDK]
            //Output : ERR_INVALID_SENDER_AND_RECIPIENT -- Sender and recipient code cannot be the same
        }

        [TestMethod] //(2)
        public void HcxOutgoingRequestOncheckSucess()
        {
            InitializeConfig();
            HCXOutgoingRequest hcxOutgoingRequest = new HCXOutgoingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            hcxOutgoingRequest.Generate(commonFhirPayload, Operations.COVERAGE_ELIGIBILITY_ON_CHECK, "testprovider1.apollo@swasth-hcx-dev", output);
            BaseRequest baseRequest = new BaseRequest(output);
            Assert.AreEqual(HCXIntegrator.config.ParticipantCode, baseRequest.GetHcxSenderCode());

            //Note Output :   [Same in JAVA SDK]
            //Output : "ERR_ACCESS_DENIED","message":"Does not have access to the called API"
        }

        [TestMethod] //(3)
        public void HcxOutgoingRequestResourceTypeError()
        {
            InitializeConfig();
            HCXOutgoingRequest hcxOutgoingRequest = new HCXOutgoingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            string fhirPayload = "{\"id\": \"d4484cdd-1aae-4d21-a92e-8ef749d6d366\", \"meta\": { \"lastUpdated\": \"2022-02-08T21:49:55.458+05:30\" }, \"identifier\": { \"system\": \"https://www.tmh.in/bundle\", \"value\": \"d4484cdd-1aae-4d21-a92e-8ef749d6d366\" }, \"type\": \"document\", \"timestamp\": \"2022-02-08T21:49:55.458+05:30\", \"entry\": [{ \"fullUrl\": \"Composition/42ff4a07-3e36-402f-a99e-29f16c0c9eee\", \"resource\": { \"resourceType\": \"Composition\", \"id\": \"42ff4a07-3e36-402f-a99e-29f16c0c9eee\", \"identifier\": { \"system\": \"https://www.tmh.in/hcx-documents\", \"value\": \"42ff4a07-3e36-402f-a99e-29f16c0c9eee\" }, \"status\": \"final\", \"type\": { \"coding\": [{ \"system\": \"https://www.hcx.org/document-type\", \"code\": \"HcxCoverageEligibilityRequest\", \"display\": \"Coverage Eligibility Request Doc\" }] }, \"subject\": { \"reference\": \"Patient/RVH1003\" }, \"date\": \"2022-02-08T21:49:55+05:30\", \"author\": [{ \"reference\": \"Organization/Tmh01\" }], \"title\": \"Coverage Eligibility Request\", \"section\": [{ \"title\": \"# Eligibility Request\", \"code\": { \"coding\": [{ \"system\": \"https://fhir.loinc.org/CodeSystem/$lookup?system=http://loinc.org&code=10154-3\", \"code\": \"CoverageEligibilityRequest\", \"display\": \"Coverage Eligibility Request\" }] }, \"entry\": [{ \"reference\": \"CoverageEligibilityRequest/dc82673b-8c71-48c2-8a17-16dcb3b035f6\" }] }] } }, { \"fullUrl\": \"Organization/Tmh01\", \"resource\": { \"resourceType\": \"Organization\", \"id\": \"Tmh01\", \"identifier\": [{ \"system\": \"http://abdm.gov.in/facilities\", \"value\": \"HFR-ID-FOR-TMH\" }, { \"system\": \"http://irdai.gov.in/facilities\", \"value\": \"IRDA-ID-FOR-TMH\" } ], \"name\": \"Tata Memorial Hospital\", \"alias\": [ \"TMH\", \"TMC\" ], \"telecom\": [{ \"system\": \"phone\", \"value\": \"(+91) 022-2417-7000\" }], \"address\": [{ \"line\": [ \"Dr Ernest Borges Rd, Parel East, Parel, Mumbai, Maharashtra 400012\" ], \"city\": \"Mumbai\", \"state\": \"Maharashtra\", \"postalCode\": \"400012\", \"country\": \"INDIA\" }], \"endpoint\": [{ \"reference\": \"https://www.tmc.gov.in/\", \"display\": \"Website\" }] } }, { \"fullUrl\": \"Patient/RVH1003\", \"resource\": { \"resourceType\": \"Patient\", \"id\": \"RVH1003\", \"identifier\": [{ \"type\": { \"coding\": [{ \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\", \"code\": \"SN\", \"display\": \"Subscriber Number\" }] }, \"system\": \"http://gicofIndia.com/beneficiaries\", \"value\": \"BEN-101\" }, { \"system\": \"http://abdm.gov.in/patients\", \"value\": \"hinapatel@abdm\" } ], \"name\": [{ \"text\": \"Hina Patel\" }], \"gender\": \"female\" } }, { \"fullUrl\": \"CoverageEligibilityRequest/dc82673b-8c71-48c2-8a17-16dcb3b035f6\", \"resource\": { \"resourceType\": \"CoverageEligibilityRequest\", \"id\": \"dc82673b-8c71-48c2-8a17-16dcb3b035f6\", \"identifier\": [{ \"system\": \"https://www.tmh.in/coverage-eligibility-request\", \"value\": \"dc82673b-8c71-48c2-8a17-16dcb3b035f6\" }], \"status\": \"active\", \"purpose\": [ \"discovery\" ], \"patient\": { \"reference\": \"Patient/RVH1003\" }, \"servicedPeriod\": { \"start\": \"2022-02-07T21:49:56+05:30\", \"end\": \"2022-02-09T21:49:56+05:30\" }, \"created\": \"2022-02-08T21:49:56+05:30\", \"provider\": { \"reference\": \"Organization/Tmh01\" }, \"insurer\": { \"reference\": \"Organization/GICOFINDIA\" }, \"insurance\": [{ \"focal\": true, \"coverage\": { \"reference\": \"Coverage/dadde132-ad64-4d18-8c18-1d52d7e86abc\" } }] } }, { \"fullUrl\": \"Organization/GICOFINDIA\", \"resource\": { \"resourceType\": \"Organization\", \"id\": \"GICOFINDIA\", \"identifier\": [{ \"system\": \"http://irdai.gov.in/insurers\", \"value\": \"112\" }], \"name\": \"General Insurance Corporation of India\" } }, { \"fullUrl\": \"Coverage/dadde132-ad64-4d18-8c18-1d52d7e86abc\", \"resource\": { \"resourceType\": \"Coverage\", \"id\": \"dadde132-ad64-4d18-8c18-1d52d7e86abc\", \"identifier\": [{ \"system\": \"https://www.gicofIndia.in/policies\", \"value\": \"policy-RVH1003\" }], \"status\": \"active\", \"subscriber\": { \"reference\": \"Patient/RVH1003\" }, \"subscriberId\": \"SN-RVH1003\", \"beneficiary\": { \"reference\": \"Patient/RVH1003\" }, \"relationship\": { \"coding\": [{ \"system\": \"http://terminology.hl7.org/CodeSystem/subscriber-relationship\", \"code\": \"self\" }] }, \"payor\": [{ \"reference\": \"Organization/GICOFINDIA\" }] } } ] }";
            hcxOutgoingRequest.Generate(fhirPayload, Operations.COVERAGE_ELIGIBILITY_CHECK, "testprovider1.apollo@swasth-hcx-dev", output);
            Assert.IsTrue(output.ContainsKey(ErrorCodes.ERR_WRONG_DOMAIN_PAYLOAD.ToString()));

            //Note Output :   [Same in JAVA SDK]
            //Output : ERR_WRONG_DOMAIN_PAYLOAD - Invalid payload is not accepted
        }

        [TestMethod] //(4)
        public void HcxOutgoingErrorDetails()
        {
            InitializeConfig();
            HCXOutgoingRequest hcxOutgoingRequest = new HCXOutgoingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            string errorDetails = "eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSIsCiJ4LWhjeC1lcnJvcl9kZXRhaWxzIjp7CiJjb2RlIjoiRVJSX0lOVkFMSURfUEFZTE9BRCIsCiJtZXNzYWdlIjoiaW52YWxpZCByZXF1ZXN0IHBheWxvYWQiLAoidHJhY2UiOiIifX0";
            hcxOutgoingRequest.Generate(commonFhirPayload, Operations.COVERAGE_ELIGIBILITY_CHECK, errorDetails, "response.complete", output);

            Assert.IsTrue(output.ContainsKey("error"));
            Assert.IsTrue(output["error"].ToString().Contains("The given key was not present in the dictionary."));

            //Note Output :   [Same in JAVA SDK]
            //Output : The given key was not present in the dictionary.
            // (Note-This due to No Participants Return by API call for Participant PublicKey)
        }

        [TestMethod] //(5)
        public void HcxIncomingRequestSuccess()
        {
            InitializeConfig();
            HCXIncomingRequest hcxIncomingRequest = new HCXIncomingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            Dictionary<string, object> payload = new Dictionary<string, object>();
            string outputPayload = "eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIiwieC1oY3gtYXBpX2NhbGxfaWQiOiJkMzFhYzRlYS1mZDg4LTQ1NDktOGNhYi1kN2E4NDU2NjI1OTQiLCJ4LWhjeC10aW1lc3RhbXAiOiIyMDIzLTAzLTE0VDE3OjQzOjE1KzA1MzAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InRlc3Rwcm92aWRlcjEuYXBvbGxvQHN3YXN0aC1oY3gtZGV2IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiJ0ZXN0cHJvdmlkZXIxLmFwb2xsb0Bzd2FzdGgtaGN4LWRldiIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiNDVlY2ViOGEtYjA3Yy00YjZjLTgxNmEtYWUxNjdhMzY3OWUxIn0.GpDYuAMEfqNnb47w74JqnhrGca2ZlVahW44OdCZE_rJFeV6CE18SmrI0q8VEsOPChMPr2DLS6GJQvV2w6CEPkUnCWfu-q66RelYc7qbd-FGR_iLlFPZOW8N2bj2GuVLnj9xsgmnd5Uv9UNfIKZsXLFWZxY6dNMDmmKll-PAbuAMO7du5yzyJ3boZK-qEMjG_aD744QKdqt3Lj2nQWCaotosAw6B8wqybrvrDhsPhEKUjXvzkZB6DrHs7h29u6Hy84DGqA1rUQj3FvBG9q7mEbVs1vuJScD2SK1gtMAtawxJYZZU_Y9opJEaxMvE3Qyd7FUUNYeN-fZUWOfTjpGG2Ig.UEI2OtiUDAUrPmHK.N0taudjrkdCsg2eH__fLf7KHaTATgMq_ajQjiT2B8ZU-sX8v9zSjL0d6XEDdcF9Ab6kk4OZk1TrOpp9CD2RQOHd1jrsgC_5mNbIFcMadnxNlq4ycF5c-D-stISLOw102CRJ68aqm7L5un8yIjIpkUqCKwf7sNB7dmqK4ty5yd559zmDVbJAOOC1vDbPeffYilDofLrz1r3rSrhIN0lZokMX-mGVz5cvA3r-Ndadh5zCV4AeLH-xStk5Ibo2zdfd67zPLds5axVSs8zNvjpS7rXBehND8DlyGVtQN_BW09fDIWJV77YcsVEQowdRGkxdJgkeRZLXVFT-Niew7P_xR5NhZVMEQovFt621Xgr55cRYe1xreJ2OLZ4t417b_x-s5SoG4CjdOvmew_LEom5oErJGcAPX01BPXbycd0pnzeUUggdKEKnAGUvqu9QKnFIFUxjLlLZYn9bTNLVfEKrUF4EHlIb5vg7eqykZSlG058xpBF2uTe63xn7IzsDkwBIXcsED1NlxOxeZwmmtc2qjtr6omLXgqGsu-tZ0LrxIQe6Yt4SDaOzko7qJLdEQrnormrtqQyskH_evd-a-tB6wZj5w2dlIqUXiygzrjNJdDk32Yy6MsS1LjrNwncqGuhrvk1LkB5_liqvwzNj7uNPxmeOlidWiEeNNQF9tl70m46ijwzAxHwcAWDmqTWWH7geCzJ3EDvlJuFJkeXzJPhItpdb3YjqKlDgZ7dKn4Dvky6nV4tgmI5eT5cRPjTsMp_4T9BckdYv10r5XZHroXM82YtNKkr5G3e8b5cScu8yyC8MaWgUQ5H9SWXiPoJOTrCrWqOxMXs9dPoiAZlTSyMUtsib3srlwzF2dxSrfrt_k4kRMXU03JfTRFonk9SaG8fHYh09tWAGGrUpQYZmDDAJ854UIOpNlNerjlj_DTr3faem4c6bmvO1wrhCxQ2b0Uz4QXDsiCEH2GDLLreT3lwmVcHcLx97uDrhkxMzmZ2mbPDo9a4rGabl2xxaJPc9dMKjTt_RtmRwnPszwd8U46o9keA4BBl-tF3z6NaT3TEcDPxqtuR38WCJNwRBu6Nz61aRXCTuZw4bNvDu8xkqf8IxmznM-qYjRx645N9Walqe_LoQWst4NxwUY5OSTnIYLheVK-PDeoUJC9Fq5m28Yy2DYeqfQU8HmFzq8onrcmSsDwF3a0qfZtm5zZeFMk1nB4m8ZgVVhb4PjhsGl-_Xv252bztEyztVEWwpllmPcxA8-jUdmaeRpcciBuIr6lHMOfHFeUvhoEUDid4oz4ZNHo3ZrA6OZuX5A0O8B92xOMNOXEgf5iUGs7eB3yNYlXlZJiGgSDS9BTEYTdNacNrfRjOaWEiLaONj24rTIAlb7ZTHVeT-UHdHWpuX84eBAkbp-AM0Xydi6BzVkOXiM7Y1l0UD9q1zvbcRjoTXISmi4watYDBdf58eqn5hLz3zQZZhMfte01DqCnmJc6_WxgaT-CJXZqJOzp8GdiQwmndzqy55sjW-pgl3pYfMDbbjbjNKoE_9I84Js1W2OYpRJcbSC_9kgzjaKplCCqVMJzD_qWXZTd1Pep1swcN-bGcco9T6YyIfX1d-Ax5Gpu9wEWXJ6N7sZQFgN0loQBR7KgCJermABJUMm_MvvijKwzgHXUm73hP5roCLQ2Ra_48_NC7P-eV6FtB7yuhOYlNkJnCpj9IOvuLfcUAUbiTAB18khzh16-N1nXgb3-JxKm-l-qUZ4PVXSkJfLH2du_CW1QCReZg-CnRFPdSIsBM0m__LjYNoEoCl7vrGGx-78FEypaoXuoDGi1jiok2RbNIqVIXS3-TV901uEFMv2ub10bY9LkftfXci0aTadTDimSKnT_zAjxAlW_jLmuu80bT1uH2LwNyhodAMc95l_6-l2pVSukLlIWPHQH8oG1FxFxAEQEu9ZndU19ymc4T7iNRGyY5f0CFHgWlrVVZp4oEpBwutH08AcmXAq9f2SpKpTm04H_E8UDbw8CLNFQMlVDzTYGi-NII3mcT87VhDz8_Kz-q2-lBEl8ooynssAtI0VmoVdxD6_EkHteqR0ogBi-aNEBMqXj3EwWH49vDoX1rM1HGwK3PfIEAKhXP6f-rQipGiQCkMT-a6vDMjCyeOgWbm8ZjEXJUjP3jt8LbKDkNPPXfsQzQjozVYuaTKlY7P7sny1x9ABqxoKMFQzxrUiJfF01qK6Hh9sVHXIvsldJIzMRPNB7AwbZBYe91GBddRtQ5KZERaEJv5rKtDw6da_FPOv0kXi2I9x2SnnP57XqloBs8Yaaz2OebMN0vFS16QHX2J4vu9h_h28sOX79rq4OUhh444qjEkmjSirPnH8DIoJwNXnpom_YuVaGD3c8FatgwKNZp0RFTu_UI6ZPgGQLwDWX_5ZQvPKNrbRWG1LYjkLSMB47Gxl7JjbMeEir403n_HMQPJTkRKfhoSDUR3HFRXKJsyaphjTGicHxRLCs68o2Jdb1eRicwe8twlnU3p1ueu5ns9CpjOMZ724lwG1L8o84EjPNgASKqd40N_fWgVEquuN8dOJXc78kZr5dnovvTNzFunP0ZC27_ubqdKY5dFYuxL0gpL-pltm4Da2PvcIak_Dloqp-lw3vhMRLdxIxLCgdKj622a9xtmtPNjyU_dz-58w8HEPLBleQ69L-S6wVHf1ew09mZrk1Rp26UUHfRTusp7nn5u2W8EKAPKoue4mJIrgiCFrR_IfTnFpuASh3yRpMPOms-lBd2pDfwglqDDpZyI9G1PlIXvoa0Y3UyCj6Xcel5BrWuuc-qKjQ950ebBkxlWL-pzeTYmuHPNr53AToBXWb4YN9Uy2iSJWUlydgOxIvQD3ig6BvygkkNmP__O4qUnZR5VDNzrTNYjK4MVaxDo_NJsmPZoWL5QUrT_6Fhy1cPooVL_pHy078CNa2acI4w6Y9mSUXX7pC6TOvTmbVp12DaqRF6BppY2nhursPw8UBj5polIFxXO-WbjIeaUPlaNy09rW9N-zreV7_u7B_zfMKfEJxBOlDOC-6BXLG7HJqas5aIsUn8Yb7frPfSA8BwQ9gwz9wSJR90H0WHuplguOhNCxBbGReDorTYtseW1dlO9T2y-U3ZeDA0AvcKQr_73KklPxg00MoB5_Hab-UHLiyY_WD_GUWcR4ppiU9oBMSo9ALgSSi91X65fDtGn0-G9zbib4qShbArS29-MOAqMnu7s9gQaNGUtDKjm5Ghy5AxqjQE0tDlac_opQXw63VLfZHW4rxtvGSEhw47WcuH0Zz2Hq19d0AgwPfuwSQniLaWLj321iDBOi8aSO_r9Ix_CvzhQstm7cG-m37iHZO_eonMuxJJDdJ4yCTGrgOOeJN3nvmgqs3xAboy0KELIyKX2-nxyyWYJaMHQtqUJFY1tP6w0T1df0VYdZyOjf-JLL9h8EKfFHzuXHhqZWw26_Sw4JSzJ4hMLaiM-FR3NqsI_jwfqvHN-zwS5nov5g2exvIUvv4nqtDJIolxzOAFLcoUObh2QbTkmJmP9CLQ84sHeFGwTCu5x1W3SjyG5SbmPKbftilxHnkP9plckRZ05-nm4rj-Wgwdcm2kduqoJI0GIlGe8oBYVOyFySanKgkT7NgSVr9eGojI0epr7PjmdV07ULius-nkZvgPjjIvsvaHeHkyWqqMmNnCQ4DKYCaq2bOyCXxF-O1g-GBQHWMSL49eYvm5oiNyzRUc7_O8Blj8bxeR0-GTWrXxWGqHncRj-hfI-uOP86OBxYIQabug1h90MNTaKaGxhs9Jc4V3guFAd4Dj__eseCxtRW2FyMEnrxFPIGMHKRFLX5BtxFrMDmXpHdG1Ks3BxHobkndGzR6eosy2ZmHr5D__9OuBi2NvlMTRiCoXJEr8N-vlrK6oVylFMsWEknHcleOwsXO-x7h1HC_EK1_KXW6nkubJZd6T_yhJOTrINLOfoXutHZ8WX2I4CO6MR_WrbhahWgxxoq1Ro7u5E1yK4D8YDQBGkGjCQJKrhSSEQ7groveQH_sUVA9lwBD5VeMPtIeKmGdG9NGjWvcSPJ-8Jny2pTz1X1AsGdd52x8-tChZXNUtCIOtQS5RvNSnaJzepeKKI32uLqTaWqIYN9jps-Kq96OnCHFH7FZT8INYhKEqQqvGto_fFHJXM6X97Z0GVxePdeO2BWq3b5HilJbQdE-LRu6nhxeRoRm0lpMpsuiFJtrpVTHxvi1EnMoPC0vCibF89p9OZ8DKdbKkKs_d4eSJczQ1vCCzWxDBIYfAuSzJW4n7OeTsMIrQrkVyQ3i37SVDkY4viQDMl_iXP0tdV-wNsgoouMNzh1YwuLHED9yfiSE513anpWgRM5G_DprX46ayQDsEUiCEjNSbrM0eyU78CzVhAn4YFvEvWEVv71dPUmgJ2bhGb4b42FogYmZTsCxTRvZF7HBrj-7tfalCKIoBRQ3P-Qf91D2_hAEp6cCEoiWGyNYBje7DzNEuDaH2Va5xucQ9aSw9UUgTB9EIR3V4-j-IXkxnmpRSAjjbSobkO1ARhszclqFfKCYcNZuXPM8nvrb-2J-U4Io2-xLw4BODdKvcDYYA3u-8RZQKwOkXVZeNOSAfhpsmBXHIaP5PrgCHtz6VG5I0S0JclXLEfUke9c8AqKH0-Xli9DnNfggwYI0_o5NH3JfZU2sJ0kVMBXLA9vCwH6Y7jSO36LpV6UtAq8lqtlyND5-fo4yYEwpoaURcblIGJsF-tmuHaXuX5-VW5YKTKfVT2eCsfHmTsnlHBAVFiHBXOSh489NlF6Tr0JKV0eFCfIHZ38A7AXcm9QAA-IyWzmoytG4bN5596gWL4h09kb0bwgvPVm7P6pv9XBMUFylQxtJM7f3GQpSjOkInhoXtjwnsbs8gAdAWopTcl2kayzVOkwgp9GYTktKXczoVPrtLvX_s5pPgrEPqCYkpituxKIR3TviFzwW90dRrQmMLAjp2MB7VUG-HwIZT4WIZMIu9ZvCLEEOAUfJl3g3OsxxRCqrkNvW0jHMJkk-KDLJApXa6A.YF9UgoAVB8kNoCvwdfMKGw";
            payload.Add(Constants.PAYLOAD, outputPayload);
            hcxIncomingRequest.Process(JSONUtils.Serialize(payload), Operations.COVERAGE_ELIGIBILITY_CHECK, output);
            BaseRequest baseRequest = new BaseRequest(payload);
            Assert.AreEqual(HCXIntegrator.config.ParticipantCode, baseRequest.GetHcxSenderCode());

            //Note Output :   [Same in JAVA SDK]
            //Output : responseObj with 3 Object  with (timestamp, api_call_id, correlation_id)
        }

        [TestMethod] //(6)
        public void HcxIncomingOnrequestSuccess()
        {
            InitializeConfig();
            HCXIncomingRequest hcxIncomingRequest = new HCXIncomingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            Dictionary<string, object> payload = new Dictionary<string, object>();
            string outputPayload = "eyJ4LWhjeC1yZWNpcGllbnRfY29kZSI6InRlc3Rwcm92aWRlcjEuYXBvbGxvQHN3YXN0aC1oY3gtZGV2IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0xMC0yN1QxMTowNzo0OCswNTMwIiwieC1oY3gtc2VuZGVyX2NvZGUiOiJ0ZXN0cHJvdmlkZXIxLmFwb2xsb0Bzd2FzdGgtaGN4LWRldiIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiZDRmNTZkNzktNDkwOC00YTk5LWE4ZGQtYTNiNzMzZmRlOGQ2IiwiZW5jIjoiQTI1NkdDTSIsImFsZyI6IlJTQS1PQUVQLTI1NiIsIngtaGN4LWFwaV9jYWxsX2lkIjoiMWUxNzk3YmQtZGJlZC00MTkyLWIwYzktY2VmNzcyNzI0YmU1In0.NSYks0P3BizbgpGF7GctpBSFDfSfap2V7AnZ5YCQMy_V0F6IZ1weRbZrBLHDTnPwPOBGGfctXpyqiXfvldMjCI_maakNjagsyC2x0pFC6NGmYhTwjqWmpL2CCaneBf9HikqwuI2cJTK8-DNOkbT9Qj8j-NxyGv1NX8UFI1K90t9e61qJ_Xurp6Qrrt6X_fiW7Jx9Vm54kCS7ZUfGK2rw_EOvc1VydsdWnUABOcmbtcTJiSVecNdRYxiKAIsiZCHULdd92a3hzbqFbyfRu1GqmuEyoimjd7jvdDSuB4bhE6WCIF-wB9Z5d3mj1ZXS8AEGT9YuSFLQTyPfo9Di3-Px-Q.0MliuZkDRADgQXY5.LWL2_vhMA8BEYtmg8SFXVoDNWvwWLZcJ9KxOHR7VWdIRxsO7PfNk7yMhctRtmAnyaaNZYZb0e3nVTai-u9aSixhmbxq6rFe3an0HbPi43BIT4ytal-CRxWoTaoBMZLmNqSr7GAvAXxNxtkSpDRUMlGg-tGdrHmcW6b1KAbA2CxE62XlaMMt5DNarXMSBDMx1_Pz0x9QqwFY-8O1GOIwPVZF59fh2e8ytlsvTh1fgiMZSOLETzN5pgCWGacc1D-tSmDD5kDQZm3SPgwZMbkco2xmKdvfdZa1AX7rDrYO6Pl-WFxv_5SO1CWwtR45tsCCp4pIOv3VUIjwv2YlmoTgXXg-EoLNgA4N8sw4kXLNtV9hMys2JdyQ93quEcFGnPO9jMg9seAT3pq_llpkN1FqE2x7zwWFeAs0g48IFc-39td6kdgOnuVEVsGAyE_OEst8TAhvRBa7EOeZmZpM1fiANdLor2xKWOI2K3o52R2XOYnchOWwjF07eWOPYulvSZQPBc1LZ_1j1myJz4qNH6aKWxkFT99FBddQ_UA49SgHRhYNScs27Ycw0BEZso9UpiXoLDJUKIp0Q717BkM5K1DdwYixkIMSEAM2HZHRaD0fk_8C0Xx0C1WxpZAhOtjKkesd1O2iUA2YbOyClgdASSUjO9KWrSgUevdHdorUDfYjvB3Kb-pjpZEyU18wTUTMg1Pb8Zjwluf_nuYM32K7N7TZlc-mdIwy8VX956eO14hZJNLFAiaf4xQskOCPiuahxD22kn1wpGEbShwE4TJYAsXTlT1xhA86CmDZwxaXSGzuYaNcpsokFCwAPkJ6axQbkPowO_CYrY9Ma5s0fwqdnCyZeUCl5ugeK-T9DtzuXBPsXi5eVky2rvqcO6cXCGCdrNfKXnc7Ehwtrv_ZxaUg0ORk_qVuGPWtfj0o9Ww2hUe8mXh7gp3d74jkDwNHV6X4S4qLApICRDU-Fw3kHZP5S1nvunjE_0FT4f3b4-SR_HAhjwl4-Rw4pRbX4Vu--CK6NfSgmNsixyapPm28tAzDfkHTDhRcHUi67fwGTEYKQvdk0JlV6zPSPopot2sRWRakyy_31oPCtz0qfavP0YT2dJWYGR9cSaJYIxz6S2cK2C0UOIIZw-TGX5zOnOzha1F-0Q3xPOswpHczoe-TafW3F22F5juRoNk7mK-BinUc4RBfBUkQWi6xTF32mLonuoeUkDRamMPX35P8ejYzBB2eDBb16QHIKyGl8R0aV_UYU5C661dG9xKvGJ98VHzFcz5j1J9WutBaMAeTRtROqRHH00psYa0oP2M4qVWR9eEP-jK9jtL8CdFGpNOiCtB7yF9WfE9N20Pqry88TODVMiT-MebZRHhvV3WCv3A3ZMgtVRqwaPoFp33I5GEDYuqDcHED_b4qZf65ZLNp5ptBSA_faSoeUJiRKRm8fep712gWgDS_fDmhdwfgIquY1fHZkofED0k_em28t0EAdJPpv0QqIKcte2vHkl65ql720YXWmYchBpDnclEMpExJg8T2CSd90jHvypi7KaPX2ahKv9zB1qlBTOFST4SWH_2I2_Tfvyhdqud7-ZWO_KFX9blDlph7WVs9rfWXjWV6zPEVquYDL-dJw5Lbk6mtHp2W7Z0ULHPrJqjLfqwjo4gcmD1TLm6LMVVYi7B2jb-_Vum9sxrWkIvVILP-LoCI1MYRvCj1QjrmO9ZFfqAGoIud_BYDKbnU3NoBJ0eWsvucGhrzaZ4-BYj_cOdUblQu08kmCHuxdhzSh8rZ4-vFrQ-9ZP83lHDA0tX5_F2MT_LoZQhph_NedK1bhhzBPaB4och2sY83So8dmgfcIlJXOkV_K6jO517pkHR7FBO-vQcD4850F7StoFZQoGRC4nqPTX6jCjMCNOMKoN1CQ58rmXrAI5LVtfo78iErXCXpsc-IO9HPfRSK-6PwA7cETFyy_To8ZjgozhJg6XUjxnYv4wD-9SpKMJwH39eihFj_bXWhXoHeZmXB8_8YSPf5L0ADirzoo6Pkxr6-zy1AmfNFrGXI-Zfb5BC6mRfRM3g9cTLr_fN3tESHnm3wzSh5dO3gpSHhE21eADFj7A6be8p2BgvvQl_ecm6KwPyO56-0HC4jxLTgZhyhtDuULWS4J6EPN6p2kE_EB_x7N5-RibkqfsbGMHMIRjKR7uzliG-WeYemvBdtkX7AmGuNVpRd_30fHmnE_yZoGdcrJjSeycv5EdqT7CeTBziIK2R78REHroEUJ23C3lvbfrH6Tz8XJ2ktokWxPXRqbwoqd3tcN7T9PoUgSvuSLJ32a7oMGzuYYOTS6JUWmBvGihfqKng-Pf9dxyZCSZ24nhxHNbw3HqW4gKI5viL5d9jUPtaT_GQKOEHNJpDeVMdV7lGgCbogkg5l4te0onSXDOCGEdnSvS3iuqtvT4-zo9tyrWIjUl5NQ8sZiK82-Nd_szEXjJzG88Xq6-oTZEUBqryI0FZjYNkE-ME-6L-zhR8hQdxwAwNMFXHW3EVT0ScCVYCo4EAGeQnQ-HnBEw7MouFlRLiNAf-50hOUBkBau8O8yHey1nrj2bsaeUcAksNUnELXiyCxhKemwFiZvLhCVgh5TTbVYw_Y89DA-MM1zwXC-k6IMqSW7JeCZogoeWr3Zx7l4eps0OvLUoqrAFV3ll8I_XToK-Ik6VQ68VdPj4GazF6cWaXnAHLfvJG_aXcGrAYpZtgUgClHOh2OwHZmCZMSYHdQCxQimnLelRfETan7cqYrkEaWJYUgP3UC3r4sP-JqEaWyYAoFvUoQ9G9U4msM82pagm3qmlXSSbKLPSD3tDwXXPJvZWfghw1VU8ZFpmiLKXanJ5eifWcwoDPPIuAAxYfKhsppg6S98JvBXHLkAchNovaxpjZopRMOkB1kjGBL_Y09d3D7MosAZKfZ6rloz6pHtrHz2RK7OaLQnrKZGVvYm3kuPRexi6p5gQ0wdPNMUNUU02FXBE1s_EASMX595qZE-zQ70Sor5l7YQ1CtM0EUaks1sVwRLyt8dyRi-ezsr6zNZFE4DTP7LUF96Mhb7wesntpOEOLTHeLbAJcC4rXUIN1guzU4vxEa8zqUzjEKy9zqQAUZ2e1mLpGDSoiYbdYHAmX1KRpfaTiUg6uXolUA60Vo-LAzlZ0ddU_NXOJJNSkx-F-U_0vcblf6qxTSUp35ppfxtP0_859WOIgWULId4jSEvi0hHUh2YGgbwh_uIGygjzISEHEdDHJ5mKDFrsGB_Wsw8VSM9-dPvf4C_ShvwxUkvuZh5_A9sjjUoVbz5nLcgTTsMMgM7xbwq-4E7dWKKMFy0gcy856lu5BlAIQ0VGtt6Cx3LtJ9aqOGchSiplhka67509gHuw33iPew2vdleAtJ3TAcSXkBg4Mw2dFqfWRH06gsm5pYjN8JR6RZHrxv8ldssKvV8E6udVUCRE-SkCMxbvCbSbZxNwD5AkbzbKlqf9pCtYNe9ThlgmV9HR7UE6pWPefCloH2DGs-iRSmWLUX1nyqQgs5KOX4YkWAi6He3IMMoFTL1SPNg1Z77RJZAYKvU2Hu2OK5mzUvyFcTLA3u8U6G6DUFjM3NFdhlEaxEbi6pAt7ChK2rRtGGUgJEEhIXU3_yqj5SGGJNplh576m4_Kg0o8XGjmz8LmbOhZflgMrVZsQUJ4UulqWpBOt5PBeBYhRNTi7EeBWQ7bCWQHYHdxJlsGb113wliz9vmtEov61LHubQV1-AAm-gp_FDOCZc9P4nv-auWzbxxjpdHMfngYPkEx6mrga6kst_7RsTkcedKFYjppmIKRtAi3MT2cBcsBGGblqdJ4tT6BOyDRIo3g8mw8RrbQeSKE3w27-tX3F9vJ9c68OMJ4vRsDHXg9XzIozhN7S0Jure-IUoOcG9XpgdW9xHuH_kcb-gg8v4MMRZn0EzPZRWIdVTpxIy7DWvHGgqYIG0JzKCXU3zaCnLow4XtahxVXWH6FNTi9z5dhiMPYIasbCVHMGmg6mjk5WwH0L2zqGsRBr_26ghrd6Pd_yxKk68IrTK7NCsHIvQHGJoqnepklu86AZbb0bST344sXJu5ulkZXMedg9JwrDSNAdmt0I57JmqEG6-29YUnC1V1IysfdttHIc59SNNHRrM4PtLh1_1qwJRNoFvJ8SxQv_GEd3GKf0tUv6kanuOGmof9thHRAozrTDhlms3_qrVe-6OWWAEiapvIRbZCp-unGW8xLHD3bH2pz47dZSTIme3LVAyNALhVV-u195ZUXz3yDKXsR1_uHBbvhk8-4PVKC1QBuZ_VF6frsYSIqoNkbOkOrNGieIWH56MnBjgaUtTYpAFo4U8zaX6TXm-xszNDotUbk269v-9mRh_mC4iBWI3Kwbbl8rbD_hVv_K8A87EJ2Z4ev53TNRrFsMyxlQjWfYdsR0Hfnvi8dFXqEgSU5M3m2RjlKccSaTcu22dt9LVaTBgTdzxrmyJhdtCJ76fpV4NoWiS8YMsK4l1d_e_Ceu4QKnVeJ-dfCUHLvGNnOZlfLu8Qc_ebPL81x1jzxOTo_Xb7GxQeJ35FUM1Zit4_yametU9kPdOUkRdudNlT9GIfwrk6FpM1f9_fNqLzklnEn-YjS5xij7zPS-bRVeRRQidzDEqm1ORi5S2nCoGlNNn_LAjbnSCbWynvfK2lvMQTZuh1RvC7eoLrGhQIStpC8DgjUa_DhXgkksZes1YeqE9vCSsOcPRsiChgyqmkOq36h_gzkDGCLDWyBRHM-M2upAD2DUNw0wFxCbVnA7bFTRL2CZ9K5uYzRFFMdI2txIKZXJ9Dq4LRcYFcLKWnkfHHqmZUT2cSvXToh2VzUNvGR-PZvcGuVRTZRPTF0YasdtEtPmAVTT8UMhkUfd2pl2SCpo336MXystN-bf9NqEC35OJXW3WGCQ1Z9KcOOvArnm0Ukrf1WcaM0w4zD9xpaKIXGYugaW-9ngUhq0eKfJe7wTuApEdGNIn3hRTGkjmxicYdcg.qmYQAxREDxNoAyCwk0e1Dw";
            payload.Add(Constants.PAYLOAD, outputPayload);
            hcxIncomingRequest.Process(JSONUtils.Serialize(payload), Operations.COVERAGE_ELIGIBILITY_ON_CHECK, output);
            Assert.IsTrue(output.ContainsKey(Constants.RESPONSE_OBJ));

            //Note Output :   [Same in JAVA SDK]
            //Output : responseObj > Mandatory headers are missing: x-hcx-status
        }

        [TestMethod] //(7)
        public void HcxIncomingErrorDetails()
        {
            InitializeConfig();
            HCXIncomingRequest hcxIncomingRequest = new HCXIncomingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            Dictionary<string, object> payload = new Dictionary<string, object>();
            string errorDetails = "eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSIsCiJ4LWhjeC1lcnJvcl9kZXRhaWxzIjp7CiJjb2RlIjoiRVJSX0lOVkFMSURfUEFZTE9BRCIsCiJtZXNzYWdlIjoiaW52YWxpZCByZXF1ZXN0IHBheWxvYWQiLAoidHJhY2UiOiIiLAoidGVzdCI6IiJ9fQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw";
            payload.Add(Constants.PAYLOAD, errorDetails);
            hcxIncomingRequest.Process(JSONUtils.Serialize(payload), Operations.COVERAGE_ELIGIBILITY_CHECK, output);
            Assert.IsTrue(output.ContainsKey(Constants.RESPONSE_OBJ));

            //Note Output :   [Same in JAVA SDK]
            //Output : responseObj > ERR_INVALID_ENCRYPTION - Decryption error

            //Note : ERROR_DETAILS Header error (not shown due to Decryption error but INTERNAL)  [Same as JAVA SDK]
            //Error details should contain only: code, message, trace
            //Status value for action API calls can be only: request.queued, request.dispatched
        }

        [TestMethod] //(8)
        public void HcxIncomingDebugDetails()
        {
            InitializeConfig();
            HCXIncomingRequest hcxIncomingRequest = new HCXIncomingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            Dictionary<string, object> payload = new Dictionary<string, object>();
            string debugDetails = "eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSIsCiJ4LWhjeC1kZWJ1Z19kZXRhaWxzIjp7CiJjb2RlIjoiRVJSX0lOVkFMSURfUEFZTE9BRCIsCiJtZXNzYWdlIjoiaW52YWxpZCByZXF1ZXN0IHBheWxvYWQiLAoidHJhY2UiOiIiLAoidGVzdCI6IiJ9fQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw";
            payload.Add(Constants.PAYLOAD, debugDetails);
            hcxIncomingRequest.Process(JSONUtils.Serialize(payload), Operations.COVERAGE_ELIGIBILITY_CHECK, output);
            Assert.IsTrue(output.ContainsKey(Constants.RESPONSE_OBJ));

            //Note Output :   [Same in JAVA SDK]
            //Output : responseObj > ERR_INVALID_ENCRYPTION - Decryption error

            //Note : DEBUG_DETAILS Header error (not shown due to Decryption error but INTERNAL)  [Same as JAVA SDK]
            //Debug details should contain only: code, message, trace
            //Status value for action API calls can be only: request.queued, request.dispatched
        }

        [TestMethod] //(9)
        public void HcxIncomingDebugFlag()
        {
            InitializeConfig();
            HCXIncomingRequest hcxIncomingRequest = new HCXIncomingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            Dictionary<string, object> payload = new Dictionary<string, object>();
            string debugFlag = "eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSIsCiJ4LWhjeC1kZWJ1Z19mbGFnIjoidGVzdCIKfQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw";
            payload.Add(Constants.PAYLOAD, debugFlag);
            hcxIncomingRequest.Process(JSONUtils.Serialize(payload), Operations.COVERAGE_ELIGIBILITY_CHECK, output);
            Assert.IsTrue(output.ContainsKey(Constants.RESPONSE_OBJ));

            //Note Output :   [Same in JAVA SDK]
            //Output : responseObj > ERR_INVALID_ENCRYPTION - Decryption error

            //Note : DEBUG_FLAG Header error (not shown due to Decryption error but INTERNAL)  [Same as JAVA SDK]
            //Debug flag cannot be other than Error, Info, Debug
            //Status value for action API calls can be only: request.queued, request.dispatched
        }

        [TestMethod] //(10)
        public void HcxIncomingErrorDetailsNull()
        {
            InitializeConfig();
            HCXIncomingRequest hcxIncomingRequest = new HCXIncomingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            Dictionary<string, object> payload = new Dictionary<string, object>();
            string errorDetailsEmpty = "eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSIsCiJ4LWhjeC1lcnJvcl9kZXRhaWxzIjpudWxsfQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw";
            payload.Add(Constants.PAYLOAD, errorDetailsEmpty);
            hcxIncomingRequest.Process(JSONUtils.Serialize(payload), Operations.COVERAGE_ELIGIBILITY_CHECK, output);
            Assert.IsTrue(output.ContainsKey(Constants.RESPONSE_OBJ));

            //Note Output :   [Same in JAVA SDK]
            //Output : responseObj > ERR_INVALID_ENCRYPTION - Decryption error

            //Note : ERROR_DETAILS Header error (not shown due to Decryption error but INTERNAL)  [Same as JAVA SDK]
            //Error details cannot be null, empty and other than 'JSON Object' with mandatory fields code or message
            //Status value for action API calls can be only: request.queued, request.dispatched
        }

        [TestMethod] //(11)
        public void HcxIncomingErrorDetailsCodeMessageEmpty()
        {
            InitializeConfig();
            HCXIncomingRequest hcxIncomingRequest = new HCXIncomingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            Dictionary<string, object> payload = new Dictionary<string, object>();
            string errorDetailsCodeMessage = "eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiUlNBLU9BRVAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6IjEtM2EzYmQ2OGEtODQ4YS00ZDUyLTllYzItMDdhOTJkNzY1ZmI0IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiIxLTdiYTA3ZTMxLWNlYmItNDc1MS1iMmI3LWZlMDUwZDlkMmMwMCIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiODU0ZmU0MWItMjEyZi00YTU1LWJlMmYtMTBiZGE4ZGFkYzk1IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0wNS0xMlQxNToyNjoxOS42MjcrMDUzMCIsIngtaGN4LWFwaV9jYWxsX2lkIjoiYWExZTNmOWItOTBhNy00ZWQ5LTk4MjEtMDMwNmYxYmNiNzQ2IiwieC1oY3gtd29ya2Zsb3dfaWQiOiI1ZTkzNGY5MC0xMTFkLTRmMGItYjAxNi1jMjJkODIwNjc0ZTIiLCJ4LWhjeC1zdGF0dXMiOiJyZXNwb25zZS5jb21wbGV0ZSIsCiJ4LWhjeC1lcnJvcl9kZXRhaWxzIjp7CiJ0cmFjZSI6IiJ9fQ==.6KB707dM9YTIgHtLvtgWQ8mKwboJW3of9locizkDTHzBC2IlrT1oOQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.KDlTtXchhZTGufMYmOYGS4HffxPSUrfmqCHXaI9wOGY.Mz-VPPyU4RlcuYv1IwIvzw";
            payload.Add(Constants.PAYLOAD, errorDetailsCodeMessage);
            hcxIncomingRequest.Process(JSONUtils.Serialize(payload), Operations.COVERAGE_ELIGIBILITY_CHECK, output);
            Assert.IsTrue(output.ContainsKey(Constants.RESPONSE_OBJ));

            //Note Output :   [Same in JAVA SDK]
            //Output : responseObj > ERR_INVALID_ENCRYPTION - Decryption error

            //Note : ERROR_DETAILS Header error (not shown due to Decryption error but INTERNAL)  [Same as JAVA SDK]
            //Error details cannot be null, empty and other than 'JSON Object' with mandatory fields code or message
            //Status value for action API calls can be only: request.queued, request.dispatched
        }

        [TestMethod] //(12)
        public void HcxOutgoingRequestRecipientCodeNull()
        {
            InitializeConfig();
            HCXOutgoingRequest hcxOutgoingRequest = new HCXOutgoingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            hcxOutgoingRequest.Generate(commonFhirPayload, Operations.COVERAGE_ELIGIBILITY_CHECK, null, output);
            BaseRequest baseRequest = new BaseRequest(output);
            Assert.IsFalse(string.IsNullOrEmpty(commonFhirPayload));

            //Note Output :   [Same in JAVA SDK]
            //Output : Error while creating headers: Object reference not set to an instance of an object.
        }

        [TestMethod] //(13)
        public void HcxIncomingRequestInvalidPayload()
        {
            InitializeConfig();
            HCXIncomingRequest hcxIncomingRequest = new HCXIncomingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            Dictionary<string, object> payload = new Dictionary<string, object>();
            string outputPayload = "eyJ4LWhjeC1yZWNpcGllbnRfY29kZSI6InRlc3Rwcm92aWRlcjEuYXBvbGxvQHN3YXN0aC1oY3gtZGV2IiwieC1oY3gtdGltZXN0YW1wIjoiMjAyMi0xMC0yN1QxMTowNzo0OCswNTMwIiwieC1oY3gtc2VuZGVyX2NvZGUiOiJ0ZXN0cHJvdmlkZXIxLmFwb2xsb0Bzd2FzdGgtaGN4LWRldiIsIngtaGN4LWNvcnJlbGF0aW9uX2lkIjoiZDRmNTZkNzktNDkwOC00YTk5LWE4ZGQtYTNiNzMzZmRlOGQ2IiwiZW5jIjoiQTI1NkdDTSIsImFsZyI6IlJTQS1PQUVQLTI1NiIsIngtaGN4LWFwaV9jYWxsX2lkIjoiMWUxNzk3YmQtZGJlZC00MTkyLWIwYzktY2VmNzcyNzI0YmU1In0.NSYks0P3BizbgpGF7GctpBSFDfSfap2V7AnZ5YCQMy_V0F6IZ1weRbZrBLHDTnPwPOBGGfctXpyqiXfvldMjCI_maakNjagsyC2x0pFC6NGmYhTwjqWmpL2CCaneBf9HikqwuI2cJTK8-DNOkbT9Qj8j-NxyGv1NX8UFI1K90t9e61qJ_Xurp6Qrrt6X_fiW7Jx9Vm54kCS7ZUfGK2rw_EOvc1VydsdWnUABOcmbtcTJiSVecNdRYxiKAIsiZCHULdd92a3hzbqFbyfRu1GqmuEyoimjd7jvdDSuB4bhE6WCIF-wB9Z5d3mj1ZXS8AEGT9YuSFLQTyPfo9Di3-Px-Q.0MliuZkDRADgQXY5.LWL2_vhMA8BEYtmg8SFXVoDNWvwWLZcJ9KxOHR7VWdIRxsO7PfNk7yMhctRtmAnyaaNZYZb0e3nVTai-u9aSixhmbxq6rFe3an0HbPi43BIT4ytal-CRxWoTaoBMZLmNqSr7GAvAXxNxtkSpDRUMlGg-tGdrHmcW6b1KAbA2CxE62XlaMMt5DNarXMSBDMx1_Pz0x9QqwFY-8O1GOIwPVZF59fh2e8ytlsvTh1fgiMZSOLETzN5pgCWGacc1D-tSmDD5kDQZm3SPgwZMbkco2xmKdvfdZa1AX7rDrYO6Pl-WFxv_5SO1CWwtR45tsCCp4pIOv3VUIjwv2YlmoTgXXg-EoLNgA4N8sw4kXLNtV9hMys2JdyQ93quEcFGnPO9jMg9seAT3pq_llpkN1FqE2x7zwWFeAs0g48IFc-39td6kdgOnuVEVsGAyE_OEst8TAhvRBa7EOeZmZpM1fiANdLor2xKWOI2K3o52R2XOYnchOWwjF07eWOPYulvSZQPBc1LZ_1j1myJz4qNH6aKWxkFT99FBddQ_UA49SgHRhYNScs27Ycw0BEZso9UpiXoLDJUKIp0Q717BkM5K1DdwYixkIMSEAM2HZHRaD0fk_8C0Xx0C1WxpZAhOtjKkesd1O2iUA2YbOyClgdASSUjO9KWrSgUevdHdorUDfYjvB3Kb-pjpZEyU18wTUTMg1Pb8Zjwluf_nuYM32K7N7TZlc-mdIwy8VX956eO14hZJNLFAiaf4xQskOCPiuahxD22kn1wpGEbShwE4TJYAsXTlT1xhA86CmDZwxaXSGzuYaNcpsokFCwAPkJ6axQbkPowO_CYrY9Ma5s0fwqdnCyZeUCl5ugeK-T9DtzuXBPsXi5eVky2rvqcO6cXCGCdrNfKXnc7Ehwtrv_ZxaUg0ORk_qVuGPWtfj0o9Ww2hUe8mXh7gp3d74jkDwNHV6X4S4qLApICRDU-Fw3kHZP5S1nvunjE_0FT4f3b4-SR_HAhjwl4-Rw4pRbX4Vu--CK6NfSgmNsixyapPm28tAzDfkHTDhRcHUi67fwGTEYKQvdk0JlV6zPSPopot2sRWRakyy_31oPCtz0qfavP0YT2dJWYGR9cSaJYIxz6S2cK2C0UOIIZw-TGX5zOnOzha1F-0Q3xPOswpHczoe-TafW3F22F5juRoNk7mK-BinUc4RBfBUkQWi6xTF32mLonuoeUkDRamMPX35P8ejYzBB2eDBb16QHIKyGl8R0aV_UYU5C661dG9xKvGJ98VHzFcz5j1J9WutBaMAeTRtROqRHH00psYa0oP2M4qVWR9eEP-jK9jtL8CdFGpNOiCtB7yF9WfE9N20Pqry88TODVMiT-MebZRHhvV3WCv3A3ZMgtVRqwaPoFp33I5GEDYuqDcHED_b4qZf65ZLNp5ptBSA_faSoeUJiRKRm8fep712gWgDS_fDmhdwfgIquY1fHZkofED0k_em28t0EAdJPpv0QqIKcte2vHkl65ql720YXWmYchBpDnclEMpExJg8T2CSd90jHvypi7KaPX2ahKv9zB1qlBTOFST4SWH_2I2_Tfvyhdqud7-ZWO_KFX9blDlph7WVs9rfWXjWV6zPEVquYDL-dJw5Lbk6mtHp2W7Z0ULHPrJqjLfqwjo4gcmD1TLm6LMVVYi7B2jb-_Vum9sxrWkIvVILP-LoCI1MYRvCj1QjrmO9ZFfqAGoIud_BYDKbnU3NoBJ0eWsvucGhrzaZ4-BYj_cOdUblQu08kmCHuxdhzSh8rZ4-vFrQ-9ZP83lHDA0tX5_F2MT_LoZQhph_NedK1bhhzBPaB4och2sY83So8dmgfcIlJXOkV_K6jO517pkHR7FBO-vQcD4850F7StoFZQoGRC4nqPTX6jCjMCNOMKoN1CQ58rmXrAI5LVtfo78iErXCXpsc-IO9HPfRSK-6PwA7cETFyy_To8ZjgozhJg6XUjxnYv4wD-9SpKMJwH39eihFj_bXWhXoHeZmXB8_8YSPf5L0ADirzoo6Pkxr6-zy1AmfNFrGXI-Zfb5BC6mRfRM3g9cTLr_fN3tESHnm3wzSh5dO3gpSHhE21eADFj7A6be8p2BgvvQl_ecm6KwPyO56-0HC4jxLTgZhyhtDuULWS4J6EPN6p2kE_EB_x7N5-RibkqfsbGMHMIRjKR7uzliG-WeYemvBdtkX7AmGuNVpRd_30fHmnE_yZoGdcrJjSeycv5EdqT7CeTBziIK2R78REHroEUJ23C3lvbfrH6Tz8XJ2ktokWxPXRqbwoqd3tcN7T9PoUgSvuSLJ32a7oMGzuYYOTS6JUWmBvGihfqKng-Pf9dxyZCSZ24nhxHNbw3HqW4gKI5viL5d9jUPtaT_GQKOEHNJpDeVMdV7lGgCbogkg5l4te0onSXDOCGEdnSvS3iuqtvT4-zo9tyrWIjUl5NQ8sZiK82-Nd_szEXjJzG88Xq6-oTZEUBqryI0FZjYNkE-ME-6L-zhR8hQdxwAwNMFXHW3EVT0ScCVYCo4EAGeQnQ-HnBEw7MouFlRLiNAf-50hOUBkBau8O8yHey1nrj2bsaeUcAksNUnELXiyCxhKemwFiZvLhCVgh5TTbVYw_Y89DA-MM1zwXC-k6IMqSW7JeCZogoeWr3Zx7l4eps0OvLUoqrAFV3ll8I_XToK-Ik6VQ68VdPj4GazF6cWaXnAHLfvJG_aXcGrAYpZtgUgClHOh2OwHZmCZMSYHdQCxQimnLelRfETan7cqYrkEaWJYUgP3UC3r4sP-JqEaWyYAoFvUoQ9G9U4msM82pagm3qmlXSSbKLPSD3tDwXXPJvZWfghw1VU8ZFpmiLKXanJ5eifWcwoDPPIuAAxYfKhsppg6S98JvBXHLkAchNovaxpjZopRMOkB1kjGBL_Y09d3D7MosAZKfZ6rloz6pHtrHz2RK7OaLQnrKZGVvYm3kuPRexi6p5gQ0wdPNMUNUU02FXBE1s_EASMX595qZE-zQ70Sor5l7YQ1CtM0EUaks1sVwRLyt8dyRi-ezsr6zNZFE4DTP7LUF96Mhb7wesntpOEOLTHeLbAJcC4rXUIN1guzU4vxEa8zqUzjEKy9zqQAUZ2e1mLpGDSoiYbdYHAmX1KRpfaTiUg6uXolUA60Vo-LAzlZ0ddU_NXOJJNSkx-F-U_0vcblf6qxTSUp35ppfxtP0_859WOIgWULId4jSEvi0hHUh2YGgbwh_uIGygjzISEHEdDHJ5mKDFrsGB_Wsw8VSM9-dPvf4C_ShvwxUkvuZh5_A9sjjUoVbz5nLcgTTsMMgM7xbwq-4E7dWKKMFy0gcy856lu5BlAIQ0VGtt6Cx3LtJ9aqOGchSiplhka67509gHuw33iPew2vdleAtJ3TAcSXkBg4Mw2dFqfWRH06gsm5pYjN8JR6RZHrxv8ldssKvV8E6udVUCRE-SkCMxbvCbSbZxNwD5AkbzbKlqf9pCtYNe9ThlgmV9HR7UE6pWPefCloH2DGs-iRSmWLUX1nyqQgs5KOX4YkWAi6He3IMMoFTL1SPNg1Z77RJZAYKvU2Hu2OK5mzUvyFcTLA3u8U6G6DUFjM3NFdhlEaxEbi6pAt7ChK2rRtGGUgJEEhIXU3_yqj5SGGJNplh576m4_Kg0o8XGjmz8LmbOhZflgMrVZsQUJ4UulqWpBOt5PBeBYhRNTi7EeBWQ7bCWQHYHdxJlsGb113wliz9vmtEov61LHubQV1-AAm-gp_FDOCZc9P4nv-auWzbxxjpdHMfngYPkEx6mrga6kst_7RsTkcedKFYjppmIKRtAi3MT2cBcsBGGblqdJ4tT6BOyDRIo3g8mw8RrbQeSKE3w27-tX3F9vJ9c68OMJ4vRsDHXg9XzIozhN7S0Jure-IUoOcG9XpgdW9xHuH_kcb-gg8v4MMRZn0EzPZRWIdVTpxIy7DWvHGgqYIG0JzKCXU3zaCnLow4XtahxVXWH6FNTi9z5dhiMPYIasbCVHMGmg6mjk5WwH0L2zqGsRBr_26ghrd6Pd_yxKk68IrTK7NCsHIvQHGJoqnepklu86AZbb0bST344sXJu5ulkZXMedg9JwrDSNAdmt0I57JmqEG6-29YUnC1V1IysfdttHIc59SNNHRrM4PtLh1_1qwJRNoFvJ8SxQv_GEd3GKf0tUv6kanuOGmof9thHRAozrTDhlms3_qrVe-6OWWAEiapvIRbZCp-unGW8xLHD3bH2pz47dZSTIme3LVAyNALhVV-u195ZUXz3yDKXsR1_uHBbvhk8-4PVKC1QBuZ_VF6frsYSIqoNkbOkOrNGieIWH56MnBjgaUtTYpAFo4U8zaX6TXm-xszNDotUbk269v-9mRh_mC4iBWI3Kwbbl8rbD_hVv_K8A87EJ2Z4ev53TNRrFsMyxlQjWfYdsR0Hfnvi8dFXqEgSU5M3m2RjlKccSaTcu22dt9LVaTBgTdzxrmyJhdtCJ76fpV4NoWiS8YMsK4l1d_e_Ceu4QKnVeJ-dfCUHLvGNnOZlfLu8Qc_ebPL81x1jzxOTo_Xb7GxQeJ35FUM1Zit4_yametU9kPdOUkRdudNlT9GIfwrk6FpM1f9_fNqLzklnEn-YjS5xij7zPS-bRVeRRQidzDEqm1ORi5S2nCoGlNNn_LAjbnSCbWynvfK2lvMQTZuh1RvC7eoLrGhQIStpC8DgjUa_DhXgkksZes1YeqE9vCSsOcPRsiChgyqmkOq36h_gzkDGCLDWyBRHM-M2upAD2DUNw0wFxCbVnA7bFTRL2CZ9K5uYzRFFMdI2txIKZXJ9Dq4LRcYFcLKWnkfHHqmZUT2cSvXToh2VzUNvGR-PZvcGuVRTZRPTF0YasdtEtPmAVTT8UMhkUfd2pl2SCpo336MXystN-bf9NqEC35OJXW3WGCQ1Z9KcOOvArnm0Ukrf1WcaM0w4zD9xpaKIXGYugaW-9ngUhq0eKfJe7wTuApEdGNIn3hRTGkjmxicYdcg";
            payload.Add(Constants.PAYLOAD, outputPayload);
            hcxIncomingRequest.Process(JSONUtils.Serialize(payload), Operations.COVERAGE_ELIGIBILITY_CHECK, output);
            Assert.IsTrue(output.ContainsKey(Constants.RESPONSE_OBJ));

            //Note Output :   [Same in JAVA SDK]
            //Output : responseObj > ERR_INVALID_PAYLOAD : Mandatory elements of JWE token are missing.Should have all 5 elements
        }

        private void InitializeConfig2()
        {
            Config configObj = new Config();
            configObj.ProtocolBasePath = "http://dev-hcx.swasth.app/api/v0.7";
            configObj.ParticipantCode = "testprovider1.apollo@swasth-hcx-dev";
            configObj.AuthBasePath = "http://aef8101c432d04a659e6317b3e5031cf-1674586068.ap-south-1.elb.amazonaws.com:8080/auth/realms/swasth-health-claim-exchange/protocol/openid-connect/token";
            configObj.UserName = "testprovider1@apollo.com";
            configObj.Password = "Opensaber@123";
            configObj.EncryptionPrivateKey = "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCG+XLPYiCxrZq71IX+w7uoDGxGI7qy7XaDbL3BJE33ju7rjdrP7wsAOWRvM8BIyWuRZZhl9xG+u7l/7OsZAzGoqI7p+32x+r9IJVzboLDajk6tp/NPg1csc7f2M5Bu6rkLEvrKLz3dgy3Q928rMsD3rSmzBLelfKTo+aDXvCOiw1dMWsZZdkEpCTJxH39Nb2K4S59kO/R2GtSU/QMLq65m34XcMZpDtatA1u1S8JdZNNeMCO+NuFKBzIfvXUCQ8jkf7h612+UP1AYhoyCMFpzUZ9b7liQF9TYpX1Myr/tT75WKuRlkFlcALUrtVskL8KA0w6sA0nX5fORVsuVehVeDAgMBAAECggEAX1n1y5/M7PhxqWO3zYTFGzC7hMlU6XZsFOhLHRjio5KsImgyPlbm9J+W3iA3JLR2c17MTKxAMvg3UbIzW5YwDLAXViC+aW90like8mEQzzVdS7ysXG2ytcqCGUHQNStI0hP0a8T39XbodQl31ZKjU9VW8grRGe12Kse+4ukcW6yRVES+CkyO5BQB+vs3voZavodRGsk/YSt00PtIrFPJgkDuyzzcybKJD9zeJk5W3OGVK1z0on+NXKekRti5FBx/uEkT3+knkz7ZlTDNcyexyeiv7zSL/L6tcszV0Fe0g9vJktqnenEyh4BgbqABPzQR++DaCgW5zsFiQuD0hMadoQKBgQC+rekgpBHsPnbjQ2Ptog9cFzGY6LRGXxVcY7hKBtAZOKAKus5RmMi7Uv7aYJgtX2jt6QJMuE90JLEgdO2vxYG5V7H6Tx+HqH7ftCGZq70A9jFBaba04QAp0r4TnD6v/LM+PGVT8FKtggp+o7gZqXYlSVFm6YzI37G08w43t2j2aQKBgQC1Nluxop8w6pmHxabaFXYomNckziBNMML5GjXW6b0xrzlnZo0p0lTuDtUy2xjaRWRYxb/1lu//LIrWqSGtzu+1mdmV2RbOd26PArKw0pYpXhKFu/W7r6n64/iCisoMJGWSRJVK9X3D4AjPaWOtE+jUTBLOk0lqPJP8K6yiCA6ZCwKBgDLtgDaXm7HdfSN1/Fqbzj5qc3TDsmKZQrtKZw5eg3Y5CYXUHwbsJ7DgmfD5m6uCsCPa+CJFl/MNWcGxeUpZFizKn16bg3BYMIrPMao5lGGNX9p4wbPN5J1HDD1wnc2jULxupSGmLm7pLKRmVeWEvWl4C6XQ+ykrlesef82hzwcBAoGBAKGY3v4y4jlSDCXaqadzWhJr8ffdZUrQwB46NGb5vADxnIRMHHh+G8TLL26RmcET/p93gW518oGg7BLvcpw3nOZaU4HgvQjT0qDvrAApW0V6oZPnAQUlarTU1Uk8kV9wma9tP6E/+K5TPCgSeJPg3FFtoZvcFq0JZoKLRACepL3vAoGAMAUHmNHvDI+v0eyQjQxlmeAscuW0KVAQQR3OdwEwTwdFhp9Il7/mslN1DLBddhj6WtVKLXu85RIGY8I2NhMXLFMgl+q+mvKMFmcTLSJb5bJHyMz/foenGA/3Yl50h9dJRFItApGuEJo/30cG+VmYo2rjtEifktX4mDfbgLsNwsI=\n-----END PRIVATE KEY-----";
            configObj.IgUrl = "test";
            HCXIntegrator.initConfig(configObj);
        }

        [TestMethod]
        public void hcxIncomingrequest()
        {
            InitializeConfig2();
            HCXIncomingRequest hcxIncomingRequest = new HCXIncomingRequest();
            Dictionary<string, object> output = new Dictionary<string, object>();
            Dictionary<string, object> payload = new Dictionary<string, object>();
            string outputPayload = "eyJhbGciOiJSU0EtT0FFUC0yNTYiLCJlbmMiOiJBMjU2R0NNIiwieC1oY3gtYXBpX2NhbGxfaWQiOiJkNzVlMzUyYi0yNDcwLTQ3YzktYmMyOS1jZTQ0N2E0ZGVlYjUiLCJ4LWhjeC10aW1lc3RhbXAiOiIyMDIzLTAzLTI4VDExOjU1OjMyKzA1MzAiLCJ4LWhjeC1zZW5kZXJfY29kZSI6InRlc3Rwcm92aWRlcjEuYXBvbGxvQHN3YXN0aC1oY3gtZGV2IiwieC1oY3gtcmVjaXBpZW50X2NvZGUiOiJ0ZXN0cGF5b3IxLmljaWNpQHN3YXN0aC1oY3gtZGV2IiwieC1oY3gtY29ycmVsYXRpb25faWQiOiJhMmRiMWQyZS04MzE3LTRjZDItYWYyYy1jM2E5MDBhNjc5OGYifQ.gMnJbDSh4v2iW6EDh802rIj_3ZTA-AFbtlnmg4wgstYsjsGrkwlNthHz0Xb-zF1Y7NsIGm2aKr15LpXTwt3HtahrZ1CfElFpFdNOePDYZipVtjZe8h7FbHwhAmxF3C7pC8rFFGCMnd11gkGpjFTMUfN-iD7ly9nhZKon99dA1Uig2LqsaA8IpA9JDwN6qVQd2vQBYO2SbKb5MymQEkFMCgwOKRFjZ91Jum_DzfrRgjtPkdkiSC2ZR1dlgBpk2cTZ0-tE82-1CxkoYxRsV-Tjd2jfc7AQoot-R1gNQ-NzYGuO-1HYifZopGZgiDsyuoEhl50uxtatZfK0y927Pr_8Yg.Umr8IY9ywm9lqZvu.BaekpxaEru0gdNp3ZhA3ZTVSSh45ji4-dwRyglVg3PSQvmVq6T4_LtKPU3it2QDfnudIbfNdN_GyWl0Hx2F85ZktzCRJLeWau9FKy7g8B9S7DQjUA4pQ8FntorMCagqF2UunOrhbBcYjz4RKB3n7GganN2EgoxOxtD3ovO5RBnRvLdV3Z-O9jI7bbW2cdNm87eGTlS6_68Dv1CZq0_IJFK79uvbH5ChnzGJaJ0riTCxnaD2jV0f0wSMuDcbharqX76pKvHGCLLqZW_P_Eq5Kws9-nTyTovAbfdQZ4f3dDtSr5SQJ2HY7jJXNb9aJ39XgO8mqwcLHLNzSb97nHVHybTcjvaQQ2m3WLiFZ1yDujqkznstvmrgmIw4LgsIfjJbRx1GA7ASqdsdw-VTv6u0FmcOoPUzesDt_m0gdUyhLTlvzBAYnqLS1TLs8-jLsIdobMzTMmZMaU_TtJTWyg00XA6X8EWr7en1-NnJ5R11NH47G-ta63eHvqIBdeYp4ioWu9si2cVPf26YEL6fQJ3Xg8p_I8zsNtvbAFrNWfgbfjDibPdnswzlngzmOp3ZjxUWxhlPoEiSD-lFt8eMrG6vLPKNTgp6doqHYvWB1TWOocSBsFwgRiF0KgfZMUMhF4NjHDesuMONp28s6OilUcV0uGy8-MjrWe_Jv2NF9oeXC0m2iXgbIw5hDMtP1iBUHdMB1Y9ji72z2kmBfc3aZiflBRkfn0M2uRE1gSNYr4d60huRsNJiT2RR75Y7wTv9F0PPnhW3oJGp-k8c-Et7tf3pQHtG584zshOsp1oWx08m-nKdYwUf3YduD9iSFdNrrQPYcfAcW0y4Oi54Fk6LIL3dMI3ymYPW2cMse1jV3oJaFoKTl1uK6rwwvOkaltXAHKJ9acf2v1F4sZ5mt77_0rEV0ACijXRorEvBqtnokr69LQ0rR2f20Lq48QE68zje5stN37nHmAzIzVMywXDsOli_vnIQP2eXambpu3e-_EFN1RIAhZx67IV5Y6WXDXiMncY4mdQOP7sR3gsYGC5WeO9ENV9oQnxCJ7LLuGCAGYX3Ot1ydymU1VXMIX4ejZ94yzU8l0V4TmWy4BHSJCoGCkwXqm1lqs07BIs6dyFROOprYaWavh5lom1i5VfFITvKJzLyCW_zo6ZK2Mpt4TNUk2vu739BnsV3H7hbVkA69DbZcj-eLDUecYeukgim6cOqnIqnsifqWEW7szq8EJtEldEJjiOp7LKUrNhe7SrP7lU6hukrhijwyKbVvnHBU14cOAgJgHLe93vgPyXpF7pVxxWpq_zSFZ302G168RnRaahnCJgqvDdYmjZbQ-NwkXoS4C2SzkizjUSZvFKm3IRInFWq-CUhAMwwvktuRF1Zy0xhZvYnFsHnGC46X7xJ1UDPK72hhZtkH8n-DMlvhtsENjFgPi27M6OCbln4LwLoV5hqd2AwFK4p0X8nSIHdT3vhrBQYqqp71tp_IW6WA_HUCQBV6arwCDko2b43bgu167d3XwlRSGLPiwdn2fSqjgmRf7c-8CIl9yBzNrYDJv6XO4lg5CDzJO0BUxp0ZiiSAVQrcGtbRmtFkBVNmjraq5b_pL_k9K0-I0hmlouB64DXh4Hq1HiyCPaomBAiAyg8Ey5lLcNxBnE9VD8YUwR6AYjx6SSAFK1iSqDZFohO1MDc8-gJ4AOoJfTiAcc_P_N-maow3CDGiiVoZ6XcUdjHAwrbjqNz8TXVF6f21tVikkHU6xaUVQyiGe-mAlzPL3Bx3Qur41fZ6lJaRGMnpUBTXmjE4KLM_vCrNQ9fhG64cqNTEMJmXqmWwu4ozNpyG_9P3VW2zFEX4wPwy9LifuBvIotkdTBktHNiCzQr3Sb1NbxTpJiCjD3jnXI1ih2KQFpYTQzNcPRQZzhrzOxojd9rLAtUWSKnzyAONk4N0j9O6scpDHm9HBFxJ1Us0vFsfJWdUzk1CHdSLovDZXJJ6M64JsXKdGCGrkk6DFQOZelhNOcxcLADbtSlfttuaIEBQpG0G2T-Xzu3R7oM2sRiKX--vYStMHKKORHueANlw2tkhRUsCAZvHkmIkJ2-NkBGhqLUGFi1eEef6XW1irBpIP5TFdf7XiiIBpHCvG06mpGzyNGkFgDc5kr31BYuIV7xqkCzQpYfXa7bAxYbEB6y0TEGwtjjG5gEAjWclHtU_qYnFAWhuVPvCAXXc22CPleFuYfmj1mrd8ZhMWwn_-Wl_F5eUQ1F7sdtfPNML-D299Ip-E7PqR2tgDcNudGFzkBoXX77zR3zXa_MGBlSDy-UrkGiBaG-z_tjnniANdBdQTVOmCURwY-PlvtijkdmNUm8kx2ecKbu22caLZCBB5Hy7Q_6YXXBwmXqHW10YM36D7ztaSZ8bGq6xxxxlhw7BEAb0YoRarnFDSAhW-vSMihmU5ozUOF8SCNGfUms6uuKpJ-XSO1aG4uqEfes1HuVlSVSfr0IQwgs28wS57Ge0So_96tBvZL6bDyd3euDFG36N8UjvR-hMiwcuTA_9X9f-Ssf9SsidC3Hz0_88VDD22m_vM-yGSa6Yy_iKA5eszAD4xwcggBOvSywX_Vk_bvlLPfoVamVepl_YeKdJVM-cLdeHXhokwjHEjKZ0tzyiALC1OoXYuSmn3SXwh-nL4YdUmdOJX6JcEptRRdQL_f8zga5K7en0j4tdupCtJvUjVhPWq1pGqnKQVwKCdqV_pFEshcoyCTT1eXbwgpGuR4Py_ZPV_LC38XTmDeqmWuLk7i5GQmJl4-kA60pYhPMC4eoMYW-nkRNGDTQCKmGeABl-4km_SaqVQ0h8W_vcI7f58x2PTrKJy4s0poNbquZMM_-67BzGEhXV5tJCDroiH7WspTo7IcpLSoEustJDY_CZEUixSgXsQISTEXDNSmCEdaiv1IG25dAAtFVbbPtzOsqIRhHst6dJoesusP6xlz7Iu_V2GnS7s3OwZtlwTVPH9cSzZrFKOeB4FXb5doBcXZwf8W1cn3mZvO3fPf3s8R9BTs73HSBPDJC8vZaRJ3FDXdzITc7R-PkGrxiv4J_Togu4sAy_bplR744uEsHEzT3HQIcYHa_NQOaAVuYaucL_1AQJG3EL0FMo1HFg-ZkaoziaGR0JdVEmq3MUNakMXWBdvYiucONs0fIdjTyg_fn-i6WfNKExI-RfBUYuVtKCeOwhNkvM5Wo1xq61dlVNRa1tQWT2pLvJi-69GZPlOMnhvT3LaGKwN_i6QH-6nVqQ29Hinhtq0-RLuWRMAJWg87jo957o3u8Wm10ZmgjuV18_y42F6T3XtWKAEv3fb3zuE1gDyvgL2cQCYZQu555ncTkx0g7Hluq2Q8GYZXiz8QO8zJL3P8vB0CyHzAdmJX302Y5o3QfsvG0y1wLjHUEXtfysxapvhcneMaD7fbsfzMW2yo4hICluYGb4TfgRZtCZlS2IGYCUo4c0kUIWRwrtk9bAjd3vsJIOT2DNHcSHxq0TGcDutkJwHVF9I0_0PI2ZnvTCjP9zKlSRpHYkpY-4caB0Q9M7CIavBUGLekAQ4ldAAakuStOS00XWwb_9ciIOywC6HrkvIdrwX0XOc8lWyv1VVc18nKkrR0lN0iveFa_h7i1piD27_1oYaihLjm6Ejdd-3HOKG88rSAoreKuR8sw-Ij0F4qrXziUEIm6Af3aQZCiTpVxzIoBOYLfBiDtJZGYhPxCi6Y-p64zQRCapQxibJMTi53ya9kbQ58BJWimzQryAt3F7bo432PmxLm7868uYjn5kNen2q6CXBC7ScVvRaEcScbvtuTu7dvBljKJDfSANtH76i0fS7cptrwrkZs0OroPco8AhqfZQGxe9WVh4cSc87Ie0vms3Y9MDs3YhzXZz2P_1Hhuc8CJKKkyQ9F1LJHYVxfiTaeCZLN02-ypJqikyUYu3kRQcrOz0c6M-jgKSrXZM9VKV6wpSIXdjvYe8sXDTWKq5DHNS0AJBjPh45yeYw_-H7hX7fD5xq482LcktkIBqsiCoFidxtd5ZTlautbl1o-FuEKTFcRwRhKsg5sPoZoU-Ao7vIJ7uv0jZh6SV_4BqQq2YR6V9mvlmyKGBzfozgoBI4vNpdoL8QbZv92PTvsaZfS6bBTcxQPLmTVyEeXj8yuIgPCo4uRpxQyGghlNZo_0BZorwxrT3TRp8dF4s8P4rDmaYjulJ_5nobZaCv3j0BMClgFWBKicDNmFqbHTwpKCmkD6bisHA9EAq_b9BjblaAXesUM5TMB77Ggwcw3haBVUzRD1C1OEGjAeRDh0VTwQcSYWOKa5Vjp9BJFct3ipbTzvDRBH_yMXwL_b6z2WzZIK9PDqrmL47Hzu1yZi-ht24QXAkU5a9RzqROZOAENxjGb5kMIv0CqOWwW5KPUAlaPiRwQgXvr32sJNjVzdQuciOVw5d_oEjE_wLXjsdMnCwr99VTRpEth4UTsh71u1hRQfOpqNQQ9XHoVUm-6EFPCXLQngunlLACPlcce0czLKF4jE-KC4Q3FH9bqilWOSPt1jAZ5U9I-OGfdCS_9YXPbpjuXcBJAd37_Cofq4TQgqxgR0Iy2-YPpAfe-DFse0tnu-8SF-UbkutO0gxhwfcuNqFBxWC--LemNwEYMcjusERbJIRu8TzvsnRjIj_0G3dWRaZXXmxEH6pn7SO8wN5bbsaGpM8ujEiCL-7X-Epy0wC73w-U3Fc-8m6C33bABlVpKccOiGAgqRl9OpjIDUrFJvrui7srm4wOrQ534GSpmlwNYorvLzouoPmiajnXLf4KeXOyTOhFhjeJswWlkXxNIbzsBdmCDSA74ORaCnCVw3xdDhRv_XfIz1mJUv9VB-5LdBJdexxj71EZWvI7hqhBUaD9rTAFxjPR-b--W551RCIxOnk8_aRPiIO3bwV0MRRgDFXj1hYwfT3d274LR43-aZmq4ZDqb_o0wqtAjcceAT0Dr0wfV4BfYQ5iK913vLheXaSoJIl8pLTNNG3b7hGXv23auHenxfpRBoJIx86bsi5GcWxPgxL0DCuWfOLoHkCIg.4L5JSue0lH57abi2xtsH2A";

            payload.Add("payload", outputPayload);
            hcxIncomingRequest.Process(JSONUtils.Serialize(payload), Operations.COVERAGE_ELIGIBILITY_CHECK, output);
            BaseRequest baseRequest = new BaseRequest(output);

            Assert.IsFalse(output.ContainsKey("error") || output.ContainsKey("ERR_INVALID_DOMAIN_PAYLOAD"));
            //Output : responseObj with 3 Object  with (timestamp, api_call_id, correlation_id)
            hcxIncomingRequest.Dispose();
        }

        [TestMethod]
        public void hcxOutgoingrequest()
        {
            InitializeConfig2();
            HCXOutgoingRequest hcxOutgoingRequest = new HCXOutgoingRequest();
            //string fhirPayload = File.ReadAllText("latest-fhir-payload.txt");
            //string fhirPayloadOld = "{ \"resourceType\": \"Bundle\", \"id\": \"d4484cdd-1aae-4d21-a92e-8ef749d6d366\", \"meta\": { \"lastUpdated\": \"2022-02-08T21:49:55.458+05:30\" }, \"identifier\": { \"system\": \"https://www.tmh.in/bundle\", \"value\": \"d4484cdd-1aae-4d21-a92e-8ef749d6d366\" }, \"type\": \"document\", \"timestamp\": \"2022-02-08T21:49:55.458+05:30\", \"entry\": [{ \"fullUrl\": \"Composition/42ff4a07-3e36-402f-a99e-29f16c0c9eee\", \"resource\": { \"resourceType\": \"Composition\", \"id\": \"42ff4a07-3e36-402f-a99e-29f16c0c9eee\", \"identifier\": { \"system\": \"https://www.tmh.in/hcx-documents\", \"value\": \"42ff4a07-3e36-402f-a99e-29f16c0c9eee\" }, \"status\": \"final\", \"type\": { \"coding\": [{ \"system\": \"https://www.hcx.org/document-type\", \"code\": \"HcxCoverageEligibilityRequest\", \"display\": \"Coverage Eligibility Request Doc\" }] }, \"subject\": { \"reference\": \"Patient/RVH1003\" }, \"date\": \"2022-02-08T21:49:55+05:30\", \"author\": [{ \"reference\": \"Organization/Tmh01\" }], \"title\": \"Coverage Eligibility Request\", \"section\": [{ \"title\": \"# Eligibility Request\", \"code\": { \"coding\": [{ \"system\": \"https://fhir.loinc.org/CodeSystem/$lookup?system=http://loinc.org&code=10154-3\", \"code\": \"CoverageEligibilityRequest\", \"display\": \"Coverage Eligibility Request\" }] }, \"entry\": [{ \"reference\": \"CoverageEligibilityRequest/dc82673b-8c71-48c2-8a17-16dcb3b035f6\" }] }] } }, { \"fullUrl\": \"Organization/Tmh01\", \"resource\": { \"resourceType\": \"Organization\", \"id\": \"Tmh01\", \"identifier\": [{ \"system\": \"http://abdm.gov.in/facilities\", \"value\": \"HFR-ID-FOR-TMH\" }, { \"system\": \"http://irdai.gov.in/facilities\", \"value\": \"IRDA-ID-FOR-TMH\" } ], \"name\": \"Tata Memorial Hospital\", \"alias\": [ \"TMH\", \"TMC\" ], \"telecom\": [{ \"system\": \"phone\", \"value\": \"(+91) 022-2417-7000\" }], \"address\": [{ \"line\": [ \"Dr Ernest Borges Rd, Parel East, Parel, Mumbai, Maharashtra 400012\" ], \"city\": \"Mumbai\", \"state\": \"Maharashtra\", \"postalCode\": \"400012\", \"country\": \"INDIA\" }], \"endpoint\": [{ \"reference\": \"https://www.tmc.gov.in/\", \"display\": \"Website\" }] } }, { \"fullUrl\": \"Patient/RVH1003\", \"resource\": { \"resourceType\": \"Patient\", \"id\": \"RVH1003\", \"identifier\": [{ \"type\": { \"coding\": [{ \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\", \"code\": \"SN\", \"display\": \"Subscriber Number\" }] }, \"system\": \"http://gicofIndia.com/beneficiaries\", \"value\": \"BEN-101\" }, { \"system\": \"http://abdm.gov.in/patients\", \"value\": \"hinapatel@abdm\" } ], \"name\": [{ \"text\": \"Hina Patel\" }], \"gender\": \"female\" } }, { \"fullUrl\": \"CoverageEligibilityRequest/dc82673b-8c71-48c2-8a17-16dcb3b035f6\", \"resource\": { \"resourceType\": \"CoverageEligibilityRequest\", \"id\": \"dc82673b-8c71-48c2-8a17-16dcb3b035f6\", \"identifier\": [{ \"system\": \"https://www.tmh.in/coverage-eligibility-request\", \"value\": \"dc82673b-8c71-48c2-8a17-16dcb3b035f6\" }], \"status\": \"active\", \"purpose\": [ \"discovery\" ], \"patient\": { \"reference\": \"Patient/RVH1003\" }, \"servicedPeriod\": { \"start\": \"2022-02-07T21:49:56+05:30\", \"end\": \"2022-02-09T21:49:56+05:30\" }, \"created\": \"2022-02-08T21:49:56+05:30\", \"provider\": { \"reference\": \"Organization/Tmh01\" }, \"insurer\": { \"reference\": \"Organization/GICOFINDIA\" }, \"insurance\": [{ \"focal\": true, \"coverage\": { \"reference\": \"Coverage/dadde132-ad64-4d18-8c18-1d52d7e86abc\" } }] } }, { \"fullUrl\": \"Organization/GICOFINDIA\", \"resource\": { \"resourceType\": \"Organization\", \"id\": \"GICOFINDIA\", \"identifier\": [{ \"system\": \"http://irdai.gov.in/insurers\", \"value\": \"112\" }], \"name\": \"General Insurance Corporation of India\" } }, { \"fullUrl\": \"Coverage/dadde132-ad64-4d18-8c18-1d52d7e86abc\", \"resource\": { \"resourceType\": \"Coverage\", \"id\": \"dadde132-ad64-4d18-8c18-1d52d7e86abc\", \"identifier\": [{ \"system\": \"https://www.gicofIndia.in/policies\", \"value\": \"policy-RVH1003\" }], \"status\": \"active\", \"subscriber\": { \"reference\": \"Patient/RVH1003\" }, \"subscriberId\": \"SN-RVH1003\", \"beneficiary\": { \"reference\": \"Patient/RVH1003\" }, \"relationship\": { \"coding\": [{ \"system\": \"http://terminology.hl7.org/CodeSystem/subscriber-relationship\", \"code\": \"self\" }] }, \"payor\": [{ \"reference\": \"Organization/GICOFINDIA\" }] } } ] }";
            string fhirPayload = "{  \"resourceType\": \"Bundle\",  \"id\": \"605ccc58-00d7-4883-9393-c6530496191f\",  \"meta\": {    \"lastUpdated\": \"2023-02-17T12:32:19.672+05:30\",    \"profile\": [ \"https://ig.hcxprotocol.io/v0.7.1/StructureDefinition-CoverageEligibilityRequestBundle.html\" ]  },  \"identifier\": {    \"system\": \"https://www.tmh.in/bundle\",    \"value\": \"a5b54c44-f0ce-4604-98ad-f17455966023\"  },  \"type\": \"collection\",  \"timestamp\": \"2023-02-17T12:32:19.672+05:30\",  \"entry\": [ {    \"fullUrl\": \"CoverageEligibilityRequest/dc82673b-8c71-48c2-8a17-16dcb3b035f6\",    \"resource\": {      \"resourceType\": \"CoverageEligibilityRequest\",      \"id\": \"dc82673b-8c71-48c2-8a17-16dcb3b035f6\",      \"meta\": {        \"profile\": [ \"https://ig.hcxprotocol.io/v0.7.1/StructureDefinition-CoverageEligibilityRequest.html\" ]      },      \"identifier\": [ {        \"value\": \"req_70e02576-f5f5-424f-b115-b5f1029704d4\"      } ],      \"status\": \"active\",      \"priority\": {        \"coding\": [ {          \"system\": \"http://terminology.hl7.org/CodeSystem/processpriority\",          \"code\": \"normal\"        } ]      },      \"purpose\": [ \"benefits\" ],      \"patient\": {        \"reference\": \"Patient/RVH1003\"      },      \"servicedDate\": \"0026-12-13\",      \"created\": \"2023-02-17T12:32:18+05:30\",      \"enterer\": {        \"reference\": \"Practitioner/PractitionerViswasKar\"      },      \"provider\": {        \"reference\": \"Organization/GICOFINDIA\"      },      \"insurer\": {        \"reference\": \"Organization/WeMeanWell01\"      },      \"facility\": {        \"reference\": \"http://sgh.com.sa/Location/4461281\"      },      \"insurance\": [ {        \"coverage\": {          \"reference\": \"Coverage/COVERAGE1\"        }      } ],      \"item\": [ {        \"productOrService\": {          \"coding\": [ {            \"system\": \"https://irdai.gov.in/package-code\",            \"code\": \"E101021\",            \"display\": \"Twin Sharing Ac\"          } ],          \"text\": \" twin sharing basis room package\"        },        \"diagnosis\": [ {          \"diagnosisCodeableConcept\": {            \"coding\": [ {              \"system\": \"https://irdai.gov.in/package-code\",              \"code\": \"E906184\",              \"display\": \"SINGLE INCISION LAPAROSCOPIC APPENDECTOMY\"            } ],            \"text\": \"SINGLE INCISION LAPAROSCOPIC APPENDECTOMY\"          }        } ]      } ]    }  }, {    \"fullUrl\": \"Organization/WeMeanWell01\",    \"resource\": {      \"resourceType\": \"Organization\",      \"id\": \"WeMeanWell01\",      \"meta\": {        \"profile\": [ \"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Organization\" ]      },      \"identifier\": [ {        \"type\": {          \"coding\": [ {            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",            \"code\": \"AC\",            \"display\": \"Narayana\"          } ]        },        \"system\": \"http://abdm.gov.in/facilities\",        \"value\": \"HFR-ID-FOR-TMH\"      } ],      \"name\": \"WeMeanWell Hospital\",      \"address\": [ {        \"text\": \" Bannerghatta Road, Bengaluru \",        \"city\": \"Bengaluru\",        \"country\": \"India\"      } ]    }  }, {    \"fullUrl\": \"Organization/GICOFINDIA\",    \"resource\": {      \"resourceType\": \"Organization\",      \"id\": \"GICOFINDIA\",      \"meta\": {        \"profile\": [ \"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Organization\" ]      },      \"identifier\": [ {        \"type\": {          \"coding\": [ {            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",            \"code\": \"AC\",            \"display\": \"GOVOFINDIA\"          } ]        },        \"system\": \"http://irdai.gov.in/insurers\",        \"value\": \"GICOFINDIA\"      } ],      \"name\": \"GICOFINDIA\"    }  }, {    \"fullUrl\": \"Patient/RVH1003\",    \"resource\": {      \"resourceType\": \"Patient\",      \"id\": \"RVH1003\",      \"meta\": {        \"profile\": [ \"https://nrces.in/ndhm/fhir/r4/StructureDefinition/Patient\" ]      },      \"identifier\": [ {        \"type\": {          \"coding\": [ {            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",            \"code\": \"SN\",            \"display\": \"Subscriber Number\"          } ]        },        \"system\": \"http://gicofIndia.com/beneficiaries\",        \"value\": \"BEN-101\"      } ],      \"name\": [ {        \"text\": \"Prasidh Dixit\"      } ],      \"gender\": \"male\",      \"birthDate\": \"1960-09-26\",      \"address\": [ {        \"text\": \"#39 Kalena Agrahara, Kamanahalli, Bengaluru - 560056\",        \"city\": \"Bengaluru\",        \"state\": \"Karnataka\",        \"postalCode\": \"560056\",        \"country\": \"India\"      } ]    }  }, {    \"fullUrl\": \"Coverage/COVERAGE1\",    \"resource\": {      \"resourceType\": \"Coverage\",      \"id\": \"COVERAGE1\",      \"meta\": {        \"profile\": [ \"https://ig.hcxprotocol.io/v0.7.1/StructureDefinition-Coverage.html\" ]      },      \"identifier\": [ {        \"system\": \"https://www.gicofIndia.in/policies\",        \"value\": \"policy-RVH1003\"      } ],      \"status\": \"active\",      \"subscriber\": {        \"reference\": \"Patient/RVH1003\"      },      \"subscriberId\": \"2XX8971\",      \"beneficiary\": {        \"reference\": \"Patient/RVH1003\"      },      \"relationship\": {        \"coding\": [ {          \"system\": \"http://terminology.hl7.org/CodeSystem/subscriber-relationship\",          \"code\": \"self\"        } ]      },      \"payor\": [ {        \"reference\": \"Organization/GICOFINDIA\"      } ]    }  } ]}";

            Dictionary<string, object> output = new Dictionary<string, object>();
            hcxOutgoingRequest.Generate(fhirPayload, Operations.COVERAGE_ELIGIBILITY_CHECK, "testpayor1.icici@swasth-hcx-dev", output);

            Assert.IsFalse(output.ContainsKey("error") || output.ContainsKey("ERR_INVALID_DOMAIN_PAYLOAD"));
            //Output : responseObj with 3 Object  with (timestamp, api_call_id, correlation_id)
        }
    }
}
